%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cwru formal logo 4cblue no tag.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Tom Rask
%%CreationDate: 6/16/10
%%BoundingBox: 0 0 528 85
%%HiResBoundingBox: 0 0 527.7984 84.5694
%%CropBox: 0 0 527.7984 84.5694
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 24 8%%Subject: (University Logo)
%%BeginData: 6016 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45060505000605060506050605060506052EFD6FFF00062E2F282F28%2E280600050006050505FD6FFF052E842F2F2E2F282E0506050605060506%FD6FFF002E060500050005000500050005000505FD05FF53532E2F28A9FD%10FF2E2F2EA9A82F2E59A8FF7E532FFD21FF7E2F28532E53A8FD1FFF062E%2F0506050605060506050605060528FD04FF2F59A8FF842E2EFD10FFA800%2FFFFF530553FFFFFF0684FD22FF2F067EA9062EFD1FFF002F2805050600%06280500062F05000505FFFFFF532EFD04FFA859FFFFA8A8FFFFFF592E7E%FD04592EFFFF2E05FFFFFF052FFFFF7E2FFD045359FF53535959537E5959%5359537D2E7E59535359A8842EA9FFFF7E5953FFFF7E05FFFF8400592F7E%59537EFF2F537E59537E2F59535353597E59537EFFA92F53537E5359062E%2E00062806065305052F2E0506002EFFFFFF0659FD08FF5906FFFF532F7E%2FA8052F7D2FA8FF7E067EFFFF2E05FFFF59597E0559535953537E2F2E7E%062E592F5306535953A805595306590605A9FFFF2853FFFF5906FFFF7D06%FF2E057E2F7E2E7E535959065359537E05592E062E0559FFA9282E062F7E%2E002F2805002F002E060528530005000505FFFF8400A8FD08FF280584FF%052FFFFFFF062FFD05FF052EFF8428057DFF28FF7E06FFFFFF2828FFA8FF%FF2828FFFFA800A9FFFFA8067DFF007E7E0505A9FF5953FFFF7E00847D2E%59FF2E06FFFFA80559FFA8FF00A9FFFFA806A8FF007E0553FF842EFF007E%FFFF062E53280653065306067E05060506052EFFFF7E067EFD07FF7D5906%53FF7E052FA9FF062F537EFFFFFF5905FF53A806598459FFA805592EFF7D%0606FFFFFF2853FFFF7E062F53A8FF0659592FFF7E532F06FF597EFFFF59%06590628FFFF59055953FF2E062FFFAF062F53A8FF057E532FFF5905FF53%84FF062E537E002F2E2F05590659007E2805052E050605FFFFFF0053FD07%FF2F2E2805FFFF7E0506A928287E59FFFFFF84052F53FF5305537EFF7E06%595384FF7D0605FFFF2E28FFFF84005953A8FF06280653FF5359FF060659%53FFFF7E00FF2F06AFFF53065959FFFF2F052EFF055953A9A8062E0559FF%A8055353FFFF00535384052E532E2E53532E2E59052859052E0606FFFFFF%2F05FD05FF53A82EFF7E067EA9FFFF05A80659FFFFAFFFFFFF28067DFF84%0528FFFFA805FFFFFFA8FFA90684FF2853FFFFA806A8FFFFFF0584532EFF%7E53FFA806057EFFFF7D06FFAF057EFF5906FD05FF532EFF06A8FFFFFF05%FF2E06FFFF280659FFFF067EFFFF002F062E5353532E7D06285905050528%05FD04FF28057EA8A8062E2853FFFF002E28597E2E590628842884FFFFFF%5905FFFFFF0553FFFF5305537E2E2E597E06FFA80605FFFF590059592F59%052EFF2853282EFFFF7E0653FFA82F007EFF2806FF06067D53282FA85328%7E00535953530553FF0528A87E05FFFF7E002F7E2E062E5906A984847D53%537E0505052E0606FD05FF5A2E592E597D5959FFA859537E2F537E7E5359%5359FD04FFA87EFFFFFF7EA8FFAF59537E537E7D532FA8FFA853597EFF53%595359597E5359FFFF535953A9FFFF7EA8FFA9535953FF7E06537E597E2F%A8595353A959595359537E5359FFFF2F59AF84FFFF5959535953002E7E7E%FFFFA8A9595300282E06062E05FD1DFFAFFD31FF2E067DFFA9FD1BFF062E%5306A8FFFFFF7E2E592E2E052E0606FFFFAF7E59FFA87EA8FFFFA859FFFF%A859FFFFFFA97E59FFFFFF7E7E84FF5984FFFFA87E595984FFFFFF7E7E59%A8FD05FF7E53FD04FFA853A8FFFFFFA959847D84FFFFFF7E59FFFF7E7EFF%FFFF592F2E84FD1BFF002F2E05007EFFFF845906060005062805FFFFFF06%28FFA90684FFFF7D0528FF5928A8FFFFFF062EFFFFFF7E0059FF2E53FFFF%FF052E597EFFFFFF59057D0684FFFFFF7D06597DFFFFFF7E0559FFFFFF53%5906532EFFFFFF7D282E592EA8FD22FF062F5305060584FFFF53532F5306%2E0606FFFFFF592FFFFF7EFD04FF2F0653FF53FD04FF5353FD04FF532FFF%53FD04FF532FAFFD04FFA92EFF2E7DFFFFFF530CA8FD05FF06FD06FF2E7E%FD05FFA8062EFD24FF00532F05000505FF847E2E060005282805FFFFFF2E%53FFFF53FD04FF597D062E59FD04FF2E53FD04FF7E28537EFD04FF2E2E53%FD04FFA9052E2EFD05FF2E0659FFFFFFA906A8FD05FF067EFD06FF0653FD%0EFFA8A8A8FFA8FFA8AFA8FD05FF7DA9FD05FF84052F59000500052E2F05%532E2F002F2806FFFFFF5906FFAF59FD04FF2FFF7E0628FD04FF532FFD05%FF062EFD05FF2F2FFFA8FFFFFFA82E592EA8FFFFFF7EFF532FFD04FF06FD%06FF2E7EFD06FF2F59FD0DFFA82F2F7E532F592F065AFD04FF592E2EFFA8%FFFF5959002F7E2F2E2F28535906052E2F2E532E05FFFFFFA82E285359FF%FFFF842859FF532FFD04FF062EFD05FF592EFD04FFA9062F2E59FFFFFF59%05A82F2E84FFFF7E2E5353FFFFFF7D0659FD04FFA80553FD05FFA80553FD%0EFF0659A82828FF592EA8FFFF84597E05537E067D5306FF06067E597E53%592F532E532E2F2E530506FD05FFA8A8FD05FFA8FD09FFA9FD0EFFA9FD04%FFAFFFAFFFA8FD04FFA9A8FD05FFA9FD07FFA9FD07FFA9FD0EFF2F59AF84%2E59A92EFFFFFF7E53592828FF2F59285928000500050005000500050005%0005000505FFFFFF597E7D7E597E597E597E597E597E597E597E7D7E597E%597E597E597E597E597E7D7E7D7E597E597E7D7E597E597E597E7D7E597E%597E597E7D7E597E597E7D7E597E597E597E7D7E597E597E597E597E597E%597EFFFF055959592859592859AFFF7E062F282E53282E2E2E287E595953%7E5959537E5959537E5959537EFFFFA85A53595359535953595359535953%595359535953595359535953595359535953595359535953595359535953%595359535953595359535953595359535953595359535953595359535953%59535953595359535953FFA95953847E7EFFA85984A9FF84597E597E7E53%84A8537EFD74FFA8FD0AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%BeginPhotoshop: 286
% 3842494D04220000000001124D4D002A000000080006011A0005000000010000
% 0056011B0005000000010000005E012800030000000100020000013100020000
% 001D000000660213000300000001000100009C9E00010000008E000000840000
% 00000000004800000001000000480000000157656264616D20687474703A2F2F
% 7777772E77656264616D2E636F6D000075006E0064006500660069006E006500
% 64002C0020004C006F0067006F0073002C0020004C006F0067006F002C002000
% 46006F0072006D0061006C0020006C006F0067006F002C00200055006E006900
% 760065007200730069007400790020004C006F0067006F0073002C0020005500
% 6E006900760065007200730069007400790020004C006F0067006F000000
%EndPhotoshop
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">cwru formal logo black no tag</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2009-10-16T14:25:24-04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2009-10-16T14:25:24-04:00</xmp:ModifyDate>
         <xmp:CreateDate>2009-10-16T14:25:24-04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>44</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgALAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A5VoWn+S4vLDav5hg1K5m&#xA;kvWtLePT7iC3UKkSyEv60FwSSX7ZtjfR1MRGrKm99+WAHwaJrbHvy1a0H6tNOCpd4+X7VuPcfn+x&#xA;IdTk0uS8d9Lt57WyIHpw3M6XMoNBy5SpFbKanp+7FPfrkxfVga6IXFD7k/5x4/8AJN+XP9S5/wCo&#xA;ubNbqPrLtNP9AZfrvm3y9oT28Wp3gjurs8bSziSS4uZj39K3gWSZ6dyq5CMCeTZKYHNLLf8ANDyR&#xA;LrNvosl9LY6pdkLa2mo2l3YPKzbKqfW4oAxY7ADqdhh8KVX0Y+LG66sqytsdirsVadwiM5qQoJIU&#xA;FjQeAFSfoxViml/mr5F1XWBo2n6hJcatyKSWK2l2JoyrBWMyNCDEqsfiZ6Ad8tOGQFlrGWJNBrVP&#xA;zX8haXrLaJqGovb6urrGti1rdmWRnPFfSURH1Qx+yUqD2xGGRFhTmiDR5pvrnmrQ9C0ddY1aaS10&#xA;08OU7QTn0/UFVMqqjNEOxLgUNAdyBkIwJNBlKYAsonRtZ0/WdOh1LTnaWyuBygleOSLmvZlWVUYq&#xA;3VWpQjcbYJRINFMZAiwjcCXYq7FXYq7FXYq7FUr8x+ZtF8uaadS1mdrayVuLTLFLNQ8S1SsSyMBR&#xA;TvSmSjAyNBjKQiLLG4vzt/LGS2iuxrBSymbhFeSWt5Hblq0p6zwrGNxTdss8Cfcw8eHezS2ura6t&#xA;4rm1lSe2mUSQzxMHR0YVVlZaggjoRlJFNoNqmKuxV2KuxV2KuxV2Kvz8itbi58gQx28ZlddTupWV&#xA;dyEis45JG+SopY+wzb9XUfwoO18tXV7LoNtaofrGtsY4WYjiW+sGEH/JApvXCSgR5eaKtNF03Vtb&#xA;1O7iLWnlbTWaae425rbB+EMa12aebZVH81WPwhiASkCz5JLqt8t/qE10lvHaxyECK1hFEjjUBURa&#xA;7nioA5MSx6kk1OEMSX2p+QdzHa/kjod1LUxwQXcrhdzxS6mY0+7NdnF5C7LTmsYQX/OPkz6/ouqe&#xA;etSpNrmu30yyTGrGG1hIWK1jr9mNNzQde+HUbERHII0+4MjzL0HzP5W0nzJYRWepISsFxDd200fE&#xA;SxTW8gkR42YNxPw8T/kkjvlMJmJsN04CQ3YX+dn5man5M0yyOiw/WtRMqXl9HxDiPTYJUSd33+H1&#xA;JJUiU0/aNNxluDEJc2rPlMeTvzU/Mt9E0Hy3e6Xd/UtN8xXUCS+YfSE62tpIgl9VY3DKXdD8PJSK&#xA;V2w4sVk306Lly0BXXqlXnLVPzB0X8v8AXfMemebk1G1sXjutE1JIbGX6zbSskckM4jhERMTVKSRU&#xA;rU1HSkoCJkAQxmZCJIKbeQ7vzjqkvl7U7nzna6jBd2YvNU0Fba1ilCS29QUaPlL+6nlQN9n+BjkE&#xA;RY4a804zI0eL4Ma/NCKPyT+cHlb8wlX09M1Rv0Rr8m/EFl4Ryud+kfxUH++sli9UDFjl9ExLvQH/&#xA;ADktdSw6xoWraPbiTWfKarrF7dbD0rZ7qKG3Rtvj5zAnj2CsehOS0w2N8ix1J3BHMM488X1r5zs/&#xA;LHlmwdmsvNRi1O/agquk2wS5bl9riZZGijHbc5VjHDZPT723IeKh3/cxTQfMXny983ecdBvfPcOl&#xA;WXluSFLa7ubKwDukyu1WqIU/diPfb7sslGNA8N372uMpWRxcvcirzz15it/OOk+S9d81x6G7aQt1&#xA;+noILYpqF9K5VAjXMTwJEFWoAUcjVeXTB4YokC90nIeIRJrZEeYz+dWgeUdZ8w6l5ntFfTLYSW9n&#xA;b2UUglMShWeR3C8DI1W4qGp7dAx8MkABMvEAJJRGlxfmxqHlXS/Mf+Lo1tL7Sf0hdQrY2yTRTSWo&#xA;niEZZJUkTmeLhgpp0NeguF1XVIEyLvokP5a+afzE83eVtO1ibzxZ2eoz3nojSprWzX10jl+JAwHP&#xA;k8atx4pk8kIxNcLDHKUhfEi7LVvzIvfzT80eUI/OD21lotpFeWd3NZWMhPqpE9J6RRAqvqmpXj07&#xA;YKhwCVc/ekGRmY3y9zH3/NT837zyJofnTTngMsl+NIn0QWoaO/cOxS4gfeUepT0mVW6iq06ZLwoc&#xA;Rj8WHizMRL4M+X8zIvOH5X6r5j8q6i2laxpFtLc3dm6RTSQzW8TSG3mSVTWOTieLrQn5hlynwuGY&#xA;BFgt3i8UCRzCbB9Sn/KC5udUvW1G9vNEmuLi4kjiiq01qXKhIlRQq8qDaviTg28TbvZb8G/c8q/L&#xA;78wPJVj+Qdj5Y1CY3esahb39nbaNHFJJJPNc3U4ijUhSgLF13J2y+WOXicXRx4ZIjHR5r9YtvzD/&#xA;ACn/ACp8qLZ64be8a9Wz1LT2itrm3j+uNNODG7pzBjoFYBypO492JjkmdlkJY4DdlvmLzH528q+X&#xA;/MnmCHzRaea4dOso/SsI7eCN7e6mmRFlkFvyYxiMs9GYdD9EBGMiBVNkpSiCbtHeWJPNnmKwGoaF&#xA;57OqaVeWDcbs2tgk1rqStGyK0SQkCNkZ+cbgutBRt65GXDHnH+xlHiluJbfpYv8Alv5o/MTzf5U0&#xA;/V5vPNpYalcXfoDTZbSzUzLHJRkViOXJ0DFeKdcsyRjE/S145SkL4kTY6r+Zl7+YHnLywPOX1O38&#xA;uww3Nldz2diyFJ4xMBckQx7KrUZlp44Khwg8PNIM+Ii+TFdM/NT81pLPyl5j1fVf0f5Y8xagbC9m&#xA;W0tqQFJOIdHeM0jlHL7VSODHpTLDihuANw1jLPYk7F6t50uvOF/560jy55Y15tID2U99rLC1t7n0&#xA;oFdY7d19ZT8csvJKVpRSabZj4xERJItvyGRkADTBPy483/mP508pR6q/niz0vVHvTawafNaWgE3E&#xA;rReTAvWTkQOKHfLckIRP07NWOcpC+J4r5OuLa18o6Zd3kZfT08yxxX9O9tNa+nOle3OMsMyjz+Dj&#xA;R5fFnqflnrmj6bYrDZmbVtL07UNLslHSbUdR1S5soXXl/Ja85uXReIY5V4gP46UC2+GQPP8AbTEP&#xA;MPl6xtdHh0tbwWXkzSZW+vayF5SaxqqjjN9SjPH1li/uoiSERaszVehmDv5/c1yjt5D7Swpbuxvr&#xA;64+p2KWljb2dwLeHaSSgjNHmlIUySE7lqAfyhRQZYGt9i/8AOPaJJ+THl5HUOjx3KsrCoIN3MCCD&#xA;mu1H1l2On+gMZ8mWXmP8oNU1LRLvS7zV/Il9ctd6ZqunxNdS2ZIAkW5hjDS8QirVgKbVAPIgTnWQ&#xA;XdSa4A4zVXFkXmf81pbq0Wz8lafqWoahLJF698um3Ygs4OdZZHE0Kl29NW4RqpLHpvtkYYaPqbJZ&#xA;rHpv5JPa+Vrfz9cea9e8yRa5pHqctPtNP9O7tj+i4o+SfuQn+kGWQvIY15UJC0r1kZ8FAUWAhx2T&#xA;Y/Ux78vtf8w6Z5A07yv5x8oahd6PZ3M1tqpn025mppzI0lvOqlaH05vhYAFlQAgVyeSIMrid/ewx&#xA;yIjUht7knv8AyvNp/l7z7ZeUdK1iXyzr8dpH5f042d6/O4jdHuJEV4y8cSqdnl48+i8uOSEtxZFh&#xA;iY0JcINF6B+XU2j6YfLFtp/ke/sfMMllFp2ram+nyWEMcawpJcSTzFAkpMsA4ctyTsRU1pyAm7ls&#xA;3YqFVHf3Mt/Nnyavm/yBq2jKnK8aIz6ftUi5h+OIDw5kcCfAnKsM+GQLbmhxRIY3+WXknUdS/LW9&#xA;Pm8Oda812iw6i0y0ljtorcWtqpVujrGPV6A82Nd8sy5KkK5BrxYyYni5lCf84/eUfMGiaFc3/meN&#xA;11C1D6Rp8TIS8dhZzyOeIHxH1J5HptuqpSu2HUTBNBGngQLLF9IstKl8++fNQ80eSNU1TRtceFtK&#xA;uJNHuJZAsaOknphoxLCZOYII4tsO/Sw3wipAEebWK4iTEkHyZDr2s+VfNGkto/nbyRqmn2QgH6Am&#xA;Wzubm5blyRI42hhLW9xxRD6bmhrRiQN4CJibjIHvZykJCpA+SidJ806d/wA43foDVLO+vdfu7OW2&#xA;trGKCW6nRZJWaCOX0hJw4Q8a8yAv2etBjYOWxyWiMVHmyjytqkkH5NWUNzpupQX1hpcelz6e9jdf&#xA;WTcxWyw0SIR8nRmpSRfg8SKGkCP3nMc2cZejkfk80/Kqys/LPk2w/S3kDVLvzjYXcs9jMmmTRPzc&#xA;ssXqXgT4Y6P8XKoHXiaDL8nqO0hXvacQERvE8XuVdQ8kw+dvzZ83vqmk6rZ6VrNhFa6Jq8tjexRr&#xA;dRQxJ6jAogVao397RSPAkYBPggKIUw4pmwd01ur/AM0Wvlbyp5c1by5qTat5W1nTmu5dPsp7m1ms&#xA;rEml1DLEpRqx8apXny/ZwACyQRuEkkAAg2CifzY/KzVJkvfO35fB7bWNQs5odb0gI0Yv7a5iKyH0&#xA;WCkTgNUowqWFdpB8UcWUfTJllxH6os01KWfT/wAoo7WSyu5r6bRlso7K2tp55/rD2ZUI0cSOyfEK&#xA;FnooPU5WN8l+bYdofB5LbeSdT1n/AJx0t/L8mmX9j5r8sNNqNtFcWk9uxYXU0vGGV0VZC8Mh+FGr&#xA;ypXL+Osl3sWjgvHVbhEfmL5qufzI/KfyvLo+mXmrak19bXOsW1nZzTpEbeOWO4VnRGiUmQgrGW5c&#xA;GBpQ444cEzfJcs+OAoWzW18w6Lo76o3ln8vNSS2ngjm1aMafLZJMFnitxHBbtHwmkEE8srKoFQlD&#xA;1qtZiTVyDaJAXUSxrQbDRNG/MuXzX5H0vU4fKx06UaxbQWF6kNxdu37iG2t3iEnLlRmKpwTxFTk5&#xA;WY1Ii2uIAlcQapK/yps7Pyz5Nsf0v5A1W6846fdyz2EyaZNG5keqwh7wJ8MdHo3OoXrxNBksm52k&#xA;K96MQERvE8XudeeRl8+fmT54Oo6RqmnWuuW0Efl3VrmyvIYVntIETnIWRAit6VaS0qNh8VMAnwRG&#xA;481MOORsHfknosNc80flvcfll5u0ifT/ADRZ24h0e+ELPY3UlnH6lvJDdIphRiicJAWGxPiVEdhL&#xA;jB2ZUZR4JDdkf5U22uaN5Mn81eb4LuTzFqiQfXbeO2nlu1gtEFtaxfV4w8hc/FK/w9XYtQDIZiDL&#xA;hHJniBEeKXN5v+VGn2vljyWp17yBqt75ssb57zTHTS51lLhV9BTdqlUTlXlyqB4HLsps7SFe9pxA&#xA;RG8TfueWeXfNHmDy7+Wj3ej3b2zy636dwlA8UsZs6+nNE4aORT/KwIy8xBO7TGREdu99Gfk9+dWl&#xA;fmPYy6JrMMVp5jjib1LdaiK5iKlXkgqeSsAx5JyqBuDSvHDy4TA2OTmYcwnseby3819NsLPzLNBL&#xA;Hpl/qMSCKCTV9SjSK1hX4Y47bTrX6tFAq02R2k/yhWtcnEbDj5RR/b+h5ck95PfapJdS2srHTpwg&#xA;slhjgVajZY4FjRPGnEZc0dX1x/zj1y/5Uz5d4kBvTueJIqAfrc3UVGa3UfWXYaf6Ai/y78zecfML&#xA;eaF1KbTk/Q2p3WjWbW1rOnKW2CkTyq9zJVT6g/dqQf8AKxyRjGq67pxylK7rbZOPy+1jXtY8sxaj&#xA;rbWpvZprhAtnFJFEqQzNCu0ks7En0+VajrSm1THLERlQZ45Eiywy9/N3WfLn5k3fl/zXb2q+WXeF&#xA;bLXbVJY1tmuubW8d8ZHdKsI2HJeI2r0rxsGESjY5tRzGMqlyZZ5V1vzHfeZ/MunalNZy2OjzW8Vm&#xA;1tBLFI4uLdLjlIzzzKeIk47KK0rt0yE4gRBHVshIkkHogvzL8z+avL9x5c/QsliIda1a20eZby3m&#xA;maM3XM+spjuIAQoj+wRv/MMcUQbvoLRllIVXU0zC8TUGsZEspoYr4pSKaaJpYQ/i0SyRMR7Bx88r&#xA;FW2G6eW6F+aXm668l+YZtQTT4vOmkan+h7fS4oZTC11JIkUCENcc3EzsaOrgAVahCmuRLCOIV9NO&#xA;PHLLhN/VdPTrOPWBpSJeT276t6ZD3EMLrb+qa0IhaVn4jbb1KnxHbHNX5OQLrzeZ+TPzE8363rVz&#xA;pl5q/l+HULHXLjSZNIW2uVubi3svimnhY3chTlGj8eURWo3bL544gXRqmiGQk1Yu3p+pLqTWE66Z&#xA;JDFqBU/VpLlHlhD9uaI8TEfJsoFXu3m62eQeSfzj83axP5Na6j0y+XzOblb3T9PimjurFbd2QTuX&#xA;uLgNEeNTyRfauZM8AAPPZxoZpGuW713WL6Ww0m9vobZ7ya0t5Z47SP7crRoWEa0DfE5FBtmNEWac&#xA;mRoWwT8ovPeteb7P6/d6lpd7C8AkubOySWC6sLlnp9XlSV3Lpw6SUHxBqVFDl2bGI97ThyGXcmn5&#xA;ueate8p+Rr/zHo31VrjTzE0kF5FJKkiSSpFQGOWEoR6nKu/SlO+RxREpUWWaZjGwyrT1v1soV1CS&#xA;Ka9Cj6xJbxtFEX78Ed5WUfNjlZq9mwXW7zzzL5t/MbR/M+h6S76QkPmLUbu0sz9WuZngtofjhkkb&#xA;6zCHkdKclAUA98vjCBBO+zTKcwQNt2eaEddOlxfp36t+lA0gnNmHEBAkYRsgkLOKx8SQT1rlMqvb&#xA;k2xut+bzvzL+ZPnPyV5itdK16yttbt9cR4/Ltzp0clq73wZQLW4jklueKsZFAkB6djvS6OKMxY2r&#xA;m0yyygaO98noOhReZEta69c2c90wU8LGCWGOM0+JeUs0xk36NRP9XKZV0bo31Yufyg0C11m61by/&#xA;qOpeWri/PK+h0qaNLeZ9/jaCeKeMN8RpxUU7ZZ4xqiAWvwRdgkMzsLVrSzhtmnlumhQIbichpXp+&#xA;05UKCT7DKibLaBSvgS7FXYq7FXYq7FXwr5V1DyXefl5eeWNf1mbRp31eLUoZorN70MkVtJBxKrJF&#xA;SplrXl26ZtJA3YdXEx4aJrdU0iH8u/Lut2WsaT54vjfWMiz28qaLRQyn7LB7xahhswpuDieIiiB8&#xA;/wBijhBsH7P2pjrHnnTby8vI0813V5ocssjWemavpy6kLeF2qscbXMkjIUFFDRlTtiIeW6TPz2Y/&#xA;Jd+SbWLV7izu63F5Yta21lDZyxxCVnjJfnNPOy1VGr89qDJ7sLG76v8A+ceP/JN+XP8AUuf+oubN&#xA;dqPrLsNP9AdZeTvzA8ta/r9x5XuNMu9I8wXjak9vqjXEcttdzCkxT0EcSo3EGhKntXuSZxkBxXYQ&#xA;ISiTVUWYeVNB/QHl6y0kztdSWyH1rlgFMksjGSV+I+yGkckDsO5yucuI22wjQpjyeTNTv/NHmeTX&#xA;7PT7vy15gt7a1+rCaV5glmJAjOjQovJzLy+FwUIFCTvk/EAiK5hhwEk3yLX5Y/l1ceSP0zbNqD6j&#xA;Y3lxE+mvMS08dvFCsSQyk7H0wvFSNuIGw6By5eOlxYuC3fmV5W81+Ybry6dGFiLfRNUt9YlN5NNG&#xA;8kltzCwqI4ZQqsJDVyfo8RilEXfVcsJGq6G2boXKKXAVyByVTyAPcAkLX7sqbWDP+WMB/NQ+cxPx&#xA;spLeN7jTgTSTUoFeCC5ZSCp4W0zqO4bfLvF9HD+KafC9fEzeczrBIYEWScKTFHIxRGenwhnCuVBP&#xA;UhTTwOUhueZeUPJX5j6HPceqdEkTUtdm1u8uAbh5YFunX6xFbB4gOTRBkDEjZsyJzge/lTjwhMd3&#xA;O3o+pNqS2E50xIZNQ4H6sly7xw8+3qMiyNxHsP65QKvdvN1s8f8AKX5Lea/LVhod9ptzp1p5o0IT&#xA;W00sbTPa6nZXEplaK6/dRvG6FvgYB+g9qZM88ZWDdH7HGhglGiKsfa9Z1C21O+0C5to5l07VLq0e&#xA;NJ4WaVbe4kjKh0YrEziNzUHipNOgzHBAPk5BBI82HeWfIetReeR5v1iHTrC/GnGxul0l5WF9M8gd&#xA;7m45xQcacBxT4z4ueIy2eQcPCPta4YzxcRr4Jh+bXlXXfNvkm98uaQbWOXUDGs1xdySIsaRypLVV&#xA;jjlLkmOlDTx9sjhkIyspzQMo0GU6c2otYwnUo4Yr/iPrCWztJCH78GdY2I+a5WavZsF1uwr8wPKH&#xA;mvW/NXlXVtIFiLby7cPdyrdzTRyTNKAjRqI4ZVQBF2ep3P2dt7cc4gEHq1ZISJBHRnuUtzAvzH8n&#xA;+aPMGueWL7SVsPq/l69XUZFvJpo3mdTT0l9OGYIvHfnvv+ztvdimIgg9WnJAkiujPcpbnYq7FXlv&#xA;5vPrX+KfJ9ppUt8X1F7+K4sLLUJdO+sCC1M0a+oD6asG3qV36VzIw1Rv7rcfNdivvYvf6jrNr5z0&#xA;JZte1K68tzyWGih7DUlkns9TnUOYr2g9O6WUSGsvGop8JBWhtocJ2F8+TWSeIbmuXPqyD8sbSW38&#xA;5+Y4L/zHql2ukah+jdMtb+/eZJg9qsp5RyGkkg4s440pv2yGU+kUBuzxCpHc7eacfmZ5+l0C6k0i&#xA;RvqVne6LqV4urQt6l1DNbIqr6UHw7gyBlLNQnwoTkMWO9/NnlyVt5PKvy985+b9D8keZp1u4bbWL&#xA;B7Gc2uryz3VuyT2XOFbMiR5JJ710LMvOi1HEeGRkgDIfj8U42OZET3+f46px5i/N251DUYn1KGc+&#xA;VtKt9O/TlvpN0sTTXepIQ1ZVdZZYIGDR+nE1Hb7bUoMEcNcufRlLNZ35DuZr/wBY2/8Afm/9yvMf&#xA;95/S+1v/AHf9H7Hf9Y2/9+b/ANyvH95/S+1f3f8AR+x3/WNv/fm/9yvH95/S+1f3f9H7Hf8AWNv/&#xA;AH5v/crx/ef0vtX93/R+xmui/wCFf8PR/oT6j/h3hJ6X1L0fqXp8m9Xj6X7rjy5cqd61ys3e/Nsj&#xA;VbcmFf8AWNv/AH5v/cryz95/S+1r/d/0fsd/1jb/AN+b/wByvH95/S+1f3f9H7Hf9Y2/9+b/ANyv&#xA;H95/S+1f3f8AR+x3/WNv/fm/9yvH95/S+1f3f9H7Hf8AWNv/AH5v/crx/ef0vtX93/R+x3/WNv8A&#xA;35v/AHK8f3n9L7V/d/0fsd/1jb/35v8A3K8f3n9L7V/d/wBH7Hf9Y2/9+b/3K8f3n9L7V/d/0fsd&#xA;/wBY2/8Afm/9yvH95/S+1f3f9H7Hf9Y2/wDfm/8Acrx/ef0vtX93/R+x3/WNv/fm/wDcrx/ef0vt&#xA;X93/AEfsd/1jb/35v/crx/ef0vtX93/R+x3/AFjb/wB+b/3K8f3n9L7V/d/0fsd/1jb/AN+b/wBy&#xA;vH95/S+1f3f9H7Hf9Y2/9+b/ANyvH95/S+1f3f8AR+x3/WNv/fm/9yvH95/S+1f3f9H7Hf8AWNv/&#xA;AH5v/crx/ef0vtX93/R+x3/WNv8A35v/AHK8f3n9L7V/d/0fsd/1jb/35v8A3K8f3n9L7V/d/wBH&#xA;7Hf9Y2/9+b/3K8f3n9L7V/d/0fsd/wBY2/8Afm/9yvH95/S+1f3f9H7GQecP+VWfWrf/ABn+g/rX&#xA;A/Vf0x9U9T067+n9Z+Ljy8MjDjra2U+D+KlOx/5VJ+ldO+ofoD9Lemn6I9D6l9Z9LgfT+rcPj48K&#xA;8eG1MJ463ukDgvpa/R/+VVfpqT9DfoL9N+ufW+p/U/rX1jjJy5en+89Tj6la705e+A8db3SY8F7V&#xA;atr3/Ktv03F/iD9Dfpz6s/ofX/qv1v6pxk9Th6v7z0uPqcqfDTl74x4q2ullwXvVsei/6F6/RcVP&#xA;8Lfo31pfR9X6h6frbepx9T9qnH/Y8e1MmfE82A8Ov4Ucf+VK/pDRKf4f+u8V/wAP8PqnLj6h9P6t&#xA;x7erXhx/arx3wfvKPNP7uxy8n//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:584D5FE320206811994CFE267E856696</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:584D5FE320206811994CFE267E856696</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:524D5FE320206811994CFE267E856696</stRef:instanceID>
            <stRef:documentID>xmp.did:524D5FE320206811994CFE267E856696</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D27F11740720681191099C3B601C4548</stEvt:instanceID>
                  <stEvt:when>2008-04-17T14:19:15+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F1174072068118D4ED246B3ADB1C6</stEvt:instanceID>
                  <stEvt:when>2008-05-15T16:23:06-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F1174072068118D4ED246B3ADB1C6</stEvt:instanceID>
                  <stEvt:when>2008-05-15T17:10:45-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EF7F117407206811A46CA4519D24356B</stEvt:instanceID>
                  <stEvt:when>2008-05-15T22:53:33-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07F117407206811A46CA4519D24356B</stEvt:instanceID>
                  <stEvt:when>2008-05-15T23:07:07-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T10:35:43-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T10:40:59-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:26:55-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:29:01-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:29:20-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FD7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:30:54-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FE7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:31:22-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B233668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T12:23:46-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B333668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T13:27:54-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B433668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T13:46:13-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:47:57-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:51:06-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:52:22-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F117407206811B628E3BF27C8C41B</stEvt:instanceID>
                  <stEvt:when>2008-05-22T13:28:01-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FF7F117407206811B628E3BF27C8C41B</stEvt:instanceID>
                  <stEvt:when>2008-05-22T16:23:53-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:07C3BD25102DDD1181B594070CEB88D9</stEvt:instanceID>
                  <stEvt:when>2008-05-28T16:45:26-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F1174072068119098B097FDA39BEF</stEvt:instanceID>
                  <stEvt:when>2008-06-02T13:25:25-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811BB1DBF8F242B6F84</stEvt:instanceID>
                  <stEvt:when>2008-06-09T14:58:36-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F117407206811ACAFB8DA80854E76</stEvt:instanceID>
                  <stEvt:when>2008-06-11T14:31:27-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0180117407206811834383CD3A8D2303</stEvt:instanceID>
                  <stEvt:when>2008-06-11T22:37:35-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811818C85DF6A1A75C3</stEvt:instanceID>
                  <stEvt:when>2008-06-27T14:40:42-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:75AB47B77F26681194579F0F1860DE95</stEvt:instanceID>
                  <stEvt:when>2009-08-13T18:31:46-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118F62A79AACDA1C39</stEvt:instanceID>
                  <stEvt:when>2009-09-10T09:06:52-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681191099B53BFBDA700</stEvt:instanceID>
                  <stEvt:when>2009-10-13T13:15:27-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F11740720681191099B53BFBDA700</stEvt:instanceID>
                  <stEvt:when>2009-10-13T13:19:10-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F117407206811994CFE267E856696</stEvt:instanceID>
                  <stEvt:when>2009-10-16T14:17:23-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:524D5FE320206811994CFE267E856696</stEvt:instanceID>
                  <stEvt:when>2009-10-16T14:22:07-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:584D5FE320206811994CFE267E856696</stEvt:instanceID>
                  <stEvt:when>2009-10-16T14:25:24-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>8.500000</stDim:w>
            <stDim:h>11.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=47 Y=12 K=62</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>47.000004</xmpG:magenta>
                           <xmpG:yellow>12.000000</xmpG:yellow>
                           <xmpG:black>62.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -84.5693 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 84.5693 li
527.798 84.5693 li
527.798 0 li
cp
clp
[1 0 0 1 0 0 ]ct
101.497 47.8345 mo
89.5132 47.8345 82.0415 39.79 82.0415 30.8164 cv
82.0415 22.2046 90.189 12.4492 101.706 12.4492 cv
106.583 12.4492 111.72 14.4189 112.808 15.252 cv
113.172 15.5635 113.688 19.2979 113.795 22.5146 cv
113.795 22.772 112.964 22.7217 112.911 22.5654 cv
112.03 18.5205 108.192 14.0059 100.459 14.0059 cv
92.6792 14.0059 86.814 19.5039 86.814 28.8945 cv
86.814 40.3623 94.5459 46.1738 101.966 46.1738 cv
107.36 46.1738 112.704 42.9561 113.12 37.6636 cv
113.12 37.5093 114.106 37.4546 114.106 37.7666 cv
113.949 40.9824 113.429 44.7183 113.019 45.0293 cv
111.147 46.4316 107.879 47.8345 101.497 47.8345 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 .47 .12 .62 cmyk
f
123.338 35.8447 mo
130.552 35.8447 li
127.334 27.1323 li
123.338 35.8447 li
cp
130.552 47.0024 mo
130.239 47.1055 130.397 46.0176 130.552 46.0176 cv
132.315 45.8057 133.404 46.0664 133.404 45.0293 cv
133.404 43.8374 132.731 42.126 132.056 40.1523 cv
131.12 37.4038 li
122.718 37.4038 li
121.524 40.1523 li
120.539 42.4375 119.968 43.9404 119.968 44.98 cv
119.968 45.8608 120.952 45.8608 122.615 46.0176 cv
122.874 46.0176 122.874 47.1055 122.561 47.0024 cv
121.37 46.8481 119.759 46.7935 118.099 46.7935 cv
115.868 46.7935 115.506 46.7935 113.795 47.0024 cv
113.484 47.0552 113.639 46.0176 113.795 46.0176 cv
116.387 45.8057 117.737 44.4077 119.708 40.0508 cv
128.32 21.2168 li
128.424 20.9575 128.941 20.9048 129.047 21.2168 cv
136.518 40.0508 li
138.383 44.2344 138.104 45.7363 141.211 46.0176 cv
141.365 46.0313 141.471 47.1055 141.158 47.0024 cv
139.912 46.8481 138.956 46.7935 137.245 46.7935 cv
135.012 46.7935 132.211 46.7935 130.552 47.0024 cv
cp
f
142.257 45.3262 mo
142.037 45.1855 141.951 42.2788 141.881 39.5264 cv
141.86 39.2651 142.797 39.292 142.808 39.3965 cv
143.442 43.3008 145.768 46.231 149.803 45.8989 cv
152.594 45.6665 154.37 43.8525 154.163 41.3711 cv
153.628 34.9067 142.255 35.853 141.668 28.769 cv
141.372 25.1997 144.271 21.2637 149.029 20.8687 cv
151.304 20.6826 152.808 21.2344 154.217 21.8965 cv
154.544 22.0796 155.132 24.1631 155.353 26.8018 cv
155.363 26.9556 154.329 27.0415 154.318 26.8882 cv
153.618 24.082 151.592 22.2725 148.8 22.5015 cv
146.372 22.7031 144.659 24.043 144.856 26.4219 cv
145.371 32.627 156.524 31.5474 157.143 38.9922 cv
157.494 43.2305 154.489 47.1748 149.577 47.583 cv
146.731 47.8203 144.414 46.8638 142.257 45.3262 cv
cp
f
175.968 47.0024 mo
174.518 47.0024 172.078 46.7935 169.172 46.7935 cv
165.229 46.7935 160.508 46.7935 157.604 47.0024 cv
157.294 47.0024 157.448 46.0176 157.604 46.0176 cv
161.548 45.5503 161.909 45.0293 161.909 40.1016 cv
161.909 28.3765 li
161.909 23.4492 161.548 22.8262 157.604 22.4102 cv
157.448 22.4102 157.294 21.3203 157.604 21.3721 cv
160.508 21.6318 165.074 21.6846 169.017 21.6846 cv
171.819 21.6846 174.518 21.5791 176.903 21.3721 cv
176.644 22.2046 176.644 23.292 176.644 24.0688 cv
176.644 24.4873 176.591 25.626 176.644 25.8853 cv
176.644 25.9907 175.658 26.0425 175.658 25.9404 cv
175.348 24.2251 174.725 23.3984 169.694 23.3984 cv
166.319 23.3984 li
166.163 24.2798 166.113 25.7285 166.113 28.1694 cv
166.113 32.9424 li
168.705 32.9424 li
173.065 32.9424 173.375 32.8369 173.792 31.1772 cv
173.792 31.0747 174.775 31.021 174.725 31.2817 cv
174.568 31.8545 174.518 33.4604 174.518 34.3413 cv
174.518 34.8096 174.518 36.2104 174.518 36.5737 cv
174.619 36.6255 173.53 36.6777 173.53 36.6255 cv
173.169 34.6025 172.856 34.4478 168.705 34.4478 cv
166.113 34.4478 li
166.113 39.5835 li
166.113 44.564 166.372 45.0293 168.135 45.0293 cv
170.158 45.0293 li
176.125 45.0293 176.282 44.2002 176.852 41.6606 cv
176.852 41.6069 177.89 41.6069 177.89 41.7607 cv
177.733 42.7495 177.317 45.29 177.06 46.0664 cv
176.903 46.8481 176.644 47.0024 175.968 47.0024 cv
cp
f
323.644 34.2832 mo
322.97 34.2832 322.66 34.2285 322.193 34.2285 cv
322.193 28.0039 li
322.193 25.2012 322.297 23.6978 322.505 22.9707 cv
323.074 22.9209 323.231 22.8701 323.798 22.8701 cv
328.315 22.8701 330.805 24.4243 330.805 28.7837 cv
330.805 32.3096 328.783 34.2832 323.644 34.2832 cv
cp
367.339 21.4136 mo
366.197 21.5728 364.433 21.6753 362.775 21.6753 cv
360.492 21.6753 359.194 21.6753 357.638 21.4136 cv
357.324 21.311 357.324 22.3491 357.584 22.4028 cv
360.956 22.7637 361.476 23.9063 361.476 28.3672 cv
361.476 40.4531 li
343.368 21.7266 li
341.138 21.7266 338.127 21.6753 336.521 21.4136 cv
336.209 21.311 336.312 22.4028 336.469 22.4028 cv
338.231 22.6099 341.501 24.9971 341.501 26.7603 cv
341.501 40.0952 li
341.501 44.3306 340.833 45.5781 338.073 45.8433 cv
338.01 45.8545 337.648 45.8701 337.385 45.6851 cv
331.468 40.8306 331.539 37.7275 330.147 34.1787 cv
333.208 32.8823 335.076 30.3389 335.076 27.7466 cv
335.076 23.5952 331.334 21.6821 324.334 21.3647 cv
320.363 21.1821 316.127 21.0239 313.804 21.4526 cv
313.493 21.5098 313.752 22.4907 313.96 22.3862 cv
314.531 22.2822 315.017 22.3618 315.43 22.3618 cv
317.246 22.3618 318.058 23.8516 318.058 28.3672 cv
318.058 40.0952 li
318.058 45.022 317.437 45.6436 314.064 46.0054 cv
313.908 46.0054 313.752 47.0972 314.064 46.9927 cv
315.726 46.7852 318.267 46.7852 320.551 46.7852 cv
322.209 46.7852 324.855 46.8359 326.048 46.9927 cv
326.36 47.0972 326.255 46.0054 326.103 46.0054 cv
322.57 45.6934 322.209 44.7607 322.209 40.0952 cv
322.209 35.7339 li
322.676 35.7866 322.935 35.7866 323.713 35.7866 cv
324.493 35.7866 325.685 35.6318 326.618 35.4785 cv
328.234 41.2515 333.935 46.1338 336.488 46.9648 cv
336.534 46.9805 336.831 47.0107 336.831 47.0107 cv
337.531 46.9858 li
337.541 46.9858 340.88 46.7852 343.161 46.7852 cv
344.769 46.7852 346.172 46.8359 347.364 46.9927 cv
347.675 47.0972 347.572 46.0054 347.469 46.0054 cv
343.889 45.6934 343.526 44.2446 343.526 40.0952 cv
343.526 27.5874 li
362.875 47.2534 li
363.19 47.5625 363.81 47.356 363.81 47.2017 cv
363.601 45.5391 363.551 42.0122 363.551 40.0952 cv
363.551 28.3672 li
363.551 24.2168 363.864 22.6597 367.493 22.4028 cv
367.601 22.4028 367.859 21.3647 367.339 21.4136 cv
cp
f
253.06 45.5317 mo
252.847 45.3809 252.89 44.3853 252.975 41.6309 cv
252.969 41.374 253.861 41.4644 253.909 41.5562 cv
255.567 44.9775 256.57 46.0718 260.417 45.8989 cv
262.676 45.7935 264.993 44.1162 264.928 41.6265 cv
264.767 35.1436 253.357 35.4312 253.178 28.3247 cv
253.088 24.7471 256.209 20.9824 260.982 20.8623 cv
263.265 20.8047 264.733 21.4434 266.101 22.188 cv
266.419 22.3862 266.886 24.5029 266.951 27.1499 cv
266.956 27.3052 265.92 27.332 265.915 27.1738 cv
265.377 24.3345 263.46 22.4102 260.66 22.4814 cv
258.222 22.5415 256.436 23.7793 256.497 26.1665 cv
256.655 32.3901 267.853 31.9536 268.038 39.4209 cv
268.148 43.6729 265.024 47.4404 260.095 47.5654 cv
257.244 47.6372 255.124 47.1904 253.06 45.5317 cv
cp
f
217.841 47.458 mo
217.738 47.7207 217.117 47.8232 216.961 47.4087 cv
209.126 25.4116 li
199.425 47.458 li
199.322 47.7207 198.648 47.8232 198.491 47.4087 cv
188.478 22.4028 li
185.986 16.1763 185.157 14.4102 181.059 14.0474 cv
180.801 14.0474 180.593 13.1138 181.111 13.1655 cv
182.562 13.3755 184.638 13.4756 186.663 13.4756 cv
189.462 13.4756 192.939 13.4253 194.963 13.1655 cv
195.481 13.1138 195.169 14.0474 195.015 14.0474 cv
192.63 14.2563 191.33 14.5688 191.33 15.9663 cv
191.33 17.0586 192.523 20.6372 193.2 22.2983 cv
200.617 40.7676 li
208.297 23.0244 li
208.037 22.4028 li
205.495 16.3315 204.926 14.4102 200.983 14.0474 cv
200.825 14.0474 200.617 13.1138 201.033 13.1655 cv
202.538 13.3755 204.562 13.4756 206.587 13.4756 cv
209.386 13.4756 213.33 13.4253 215.352 13.1655 cv
215.769 13.064 215.611 14.0474 215.456 14.0474 cv
212.239 14.3081 211.201 14.6699 211.201 16.2271 cv
211.201 17.3696 211.721 19.2349 212.757 22.2983 cv
219.036 40.7676 li
226.457 22.0381 li
227.648 18.9756 228.321 17.3696 228.321 16.0205 cv
228.321 14.7236 227.494 14.3081 224.95 14.0474 cv
224.794 14.0474 224.484 13.1138 225.003 13.1655 cv
226.506 13.3755 228.064 13.4756 230.14 13.4756 cv
232.993 13.4756 232.938 13.4253 235.015 13.1655 cv
235.43 13.064 235.224 14.0474 235.068 14.0474 cv
231.8 14.3589 230.763 16.5898 228.321 22.4028 cv
217.841 47.458 li
cp
f
248.967 46.9927 mo
247.516 46.9927 245.079 46.7852 242.172 46.7852 cv
238.229 46.7852 233.509 46.7852 230.603 46.9927 cv
230.291 46.9927 230.448 46.0054 230.603 46.0054 cv
234.545 45.5391 234.908 45.022 234.908 40.0952 cv
234.908 28.3672 li
234.908 23.4409 234.545 22.8164 230.603 22.4028 cv
230.448 22.4028 230.291 21.311 230.603 21.3647 cv
233.509 21.6216 238.073 21.6753 242.015 21.6753 cv
244.82 21.6753 247.516 21.5728 249.903 21.3647 cv
249.646 22.1934 249.646 23.2817 249.646 24.0605 cv
249.646 24.4741 249.593 25.6167 249.646 25.8784 cv
249.646 25.9824 248.657 26.0342 248.657 25.9287 cv
248.346 24.2168 247.724 23.3862 242.693 23.3862 cv
239.319 23.3862 li
239.165 24.2681 239.112 25.7212 239.112 28.1602 cv
239.112 32.9331 li
241.707 32.9331 li
246.062 32.9331 246.375 32.8296 246.79 31.1709 cv
246.79 31.0654 247.777 31.0142 247.724 31.2715 cv
247.57 31.8413 247.516 33.4521 247.516 34.3359 cv
247.516 34.8013 247.516 36.2012 247.516 36.5645 cv
247.619 36.6157 246.531 36.6685 246.531 36.6157 cv
246.169 34.5938 245.855 34.4385 241.707 34.4385 cv
239.112 34.4385 li
239.112 39.5723 li
239.112 44.5557 239.372 45.022 241.134 45.022 cv
243.159 45.022 li
249.124 45.022 249.281 44.1929 249.85 41.6484 cv
249.85 41.5957 250.887 41.5957 250.887 41.7515 cv
250.732 42.7373 250.319 45.2798 250.058 46.0601 cv
249.903 46.8359 249.646 46.9927 248.967 46.9927 cv
cp
f
291.26 26.5493 mo
291.26 26.7085 290.326 26.6548 290.326 26.5493 cv
289.96 24.8403 289.251 23.6479 285.099 23.6479 cv
282.314 23.6479 li
282.314 40.0952 li
282.314 44.71 282.626 45.6934 286.256 46.0054 cv
286.412 46.0054 286.517 47.0425 286.101 46.9927 cv
284.908 46.8359 282.26 46.7852 280.602 46.7852 cv
278.373 46.7852 275.828 46.7852 274.219 46.9927 cv
273.802 47.0972 274.013 46.0054 274.168 46.0054 cv
277.591 45.6436 278.111 44.9673 278.111 40.0952 cv
278.111 23.6479 li
275.115 23.6479 li
271.123 23.6479 270.202 24.7871 269.685 26.6011 cv
269.479 26.6548 268.696 26.6548 268.751 26.4995 cv
268.906 25.6704 269.045 23.6978 269.009 22.6099 cv
269.002 22.373 268.906 21.9448 268.802 21.4819 cv
268.766 21.3203 269.609 21.3267 269.736 21.4321 cv
270.539 22.0825 271.839 21.8242 275.115 21.8301 cv
285.099 21.8301 li
288.246 21.8242 290.162 22.0825 290.584 21.4321 cv
290.673 21.2905 291.623 21.3267 291.518 21.5337 cv
291.311 22.3647 291.206 22.8164 291.206 24.1133 cv
291.206 24.7358 291.206 26.0342 291.26 26.5493 cv
cp
f
310.871 46.9927 mo
309.418 46.9927 306.981 46.7852 304.072 46.7852 cv
300.13 46.7852 295.41 46.7852 292.503 46.9927 cv
292.195 46.9927 292.348 46.0054 292.503 46.0054 cv
296.448 45.5391 296.811 45.022 296.811 40.0952 cv
296.811 28.3672 li
296.811 23.4409 296.448 22.8164 292.503 22.4028 cv
292.348 22.4028 292.195 21.311 292.503 21.3647 cv
295.41 21.6216 299.974 21.6753 303.917 21.6753 cv
306.719 21.6753 309.418 21.5728 311.806 21.3647 cv
311.543 22.1934 311.543 23.2817 311.543 24.0605 cv
311.543 24.4741 311.492 25.6167 311.543 25.8784 cv
311.543 25.9824 310.558 26.0342 310.558 25.9287 cv
310.249 24.2168 309.624 23.3862 304.593 23.3862 cv
301.22 23.3862 li
301.064 24.2681 301.01 25.7212 301.01 28.1602 cv
301.01 32.9331 li
303.606 32.9331 li
307.966 32.9331 308.276 32.8296 308.691 31.1709 cv
308.691 31.0654 309.676 31.0142 309.624 31.2715 cv
309.468 31.8413 309.418 33.4521 309.418 34.3359 cv
309.418 34.8013 309.418 36.2012 309.418 36.5645 cv
309.522 36.6157 308.431 36.6685 308.431 36.6157 cv
308.068 34.5938 307.757 34.4385 303.606 34.4385 cv
301.01 34.4385 li
301.01 39.5723 li
301.01 44.5557 301.273 45.022 303.036 45.022 cv
305.058 45.022 li
311.026 45.022 311.183 44.1929 311.752 41.6484 cv
311.752 41.5957 312.789 41.5957 312.789 41.7515 cv
312.634 42.7373 312.218 45.2798 311.959 46.0601 cv
311.806 46.8359 311.543 46.9927 310.871 46.9927 cv
cp
f
425.097 45.541 mo
424.886 45.3936 424.926 44.3965 425.014 41.644 cv
425.007 41.3828 425.902 41.4746 425.945 41.5708 cv
427.605 44.9868 428.607 46.0859 432.456 45.9092 cv
434.712 45.8047 437.029 44.1255 436.969 41.6382 cv
436.804 35.1548 425.394 35.4424 425.215 28.3369 cv
425.127 24.7573 428.249 20.9956 433.018 20.8735 cv
435.302 20.8169 436.772 21.4551 438.138 22.1992 cv
438.455 22.3979 438.925 24.5122 438.993 27.1582 cv
438.994 27.3145 437.958 27.3413 437.953 27.1851 cv
437.416 24.3457 435.5 22.4214 432.699 22.4907 cv
430.259 22.5508 428.476 23.7905 428.536 26.1748 cv
428.691 32.4004 439.889 31.9644 440.077 39.4326 cv
440.183 43.6851 437.061 47.4512 432.135 47.5771 cv
429.281 47.6514 427.164 47.2051 425.097 45.541 cv
cp
f
383.397 14.5771 mo
383.134 15.6152 383.031 18.0024 383.031 21.8403 cv
383.031 30.4526 li
383.706 30.5073 384.121 30.4526 384.952 30.4526 cv
392.785 30.4526 395.482 27.6006 395.482 23.3447 cv
395.482 16.29 390.868 14.4209 385.679 14.4209 cv
384.902 14.4209 384.277 14.4756 383.397 14.5771 cv
cp
388.219 31.6445 mo
387.337 31.8564 386.144 31.9053 385.002 31.9053 cv
384.018 31.9053 383.706 31.8564 383.031 31.8018 cv
383.031 37.9268 li
383.031 45.3428 382.98 45.7085 387.805 46.1235 cv
388.066 46.1235 388.167 47.2119 387.751 47.1089 cv
386.094 46.8999 383.5 46.7964 381.322 46.7964 cv
378.257 46.7964 375.873 46.7964 373.694 47.1089 cv
373.176 47.1602 373.384 46.1738 373.642 46.1235 cv
378.209 45.6035 378.517 45.7085 378.517 37.9268 cv
378.517 22.3066 li
378.517 16.4463 378.364 14.6299 375.406 14.6299 cv
374.886 14.6299 374.16 14.6821 373.433 14.8384 cv
373.279 14.8892 372.864 14.0591 373.384 13.9048 cv
375.509 13.2285 380.697 13.022 386.352 13.022 cv
393.93 13.022 400.153 15.3037 400.153 21.1138 cv
400.153 24.02 397.822 28.4321 392.422 30.6094 cv
397.456 37.6655 397.734 52.8906 410.356 53.7207 cv
412.219 53.8398 412.47 53.7095 414.36 53.1997 cv
414.679 53.1152 415.114 53.9277 414.723 54.0806 cv
411.93 55.1816 410.14 55.3906 407.45 55.1738 cv
393.726 54.0571 392.527 38.1836 388.219 31.6445 cv
cp
f
420.734 47.0044 mo
419.281 47.0044 416.843 46.7964 413.937 46.7964 cv
409.996 46.7964 405.911 46.7964 403.007 47.0044 cv
402.694 47.0044 402.852 46.0176 403.007 46.0176 cv
406.95 45.5503 406.675 45.0322 406.675 40.1025 cv
406.675 28.3784 li
406.675 23.4502 406.312 22.8281 402.368 22.4131 cv
402.214 22.4131 402.055 21.3237 402.368 21.3721 cv
405.275 21.6338 409.839 21.6865 413.785 21.6865 cv
416.585 21.6865 419.281 21.5791 421.667 21.3721 cv
421.41 22.2056 421.41 23.2935 421.41 24.0728 cv
421.41 24.4873 421.357 25.6289 421.41 25.8877 cv
421.41 25.9922 420.423 26.0425 420.423 25.9404 cv
420.113 24.2271 419.49 23.3984 414.459 23.3984 cv
411.084 23.3984 li
410.926 24.2798 410.877 25.7305 410.877 28.1694 cv
410.877 32.9443 li
413.472 32.9443 li
417.83 32.9443 418.143 32.8398 418.555 31.1792 cv
418.555 31.0747 419.54 31.0254 419.49 31.2847 cv
419.334 31.8564 419.281 33.4614 419.281 34.3423 cv
419.281 34.8135 419.281 36.2119 419.281 36.5757 cv
419.385 36.6274 418.297 36.6802 418.297 36.6274 cv
417.933 34.604 417.621 34.4497 413.472 34.4497 cv
410.877 34.4497 li
410.877 39.5854 li
410.877 44.5664 411.135 45.0322 412.9 45.0322 cv
414.925 45.0322 li
420.889 45.0322 421.047 44.2021 421.618 41.6606 cv
421.618 41.6069 422.653 41.6069 422.653 41.7632 cv
422.499 42.7505 422.084 45.293 421.824 46.0693 cv
421.667 46.8511 421.41 47.0044 420.734 47.0044 cv
cp
f
459.464 47.0044 mo
458.013 47.0044 455.577 46.7964 452.668 46.7964 cv
448.726 46.7964 444.005 46.7964 441.101 47.0044 cv
440.789 47.0044 440.944 46.0176 441.101 46.0176 cv
445.043 45.5503 445.406 45.0322 445.406 40.1025 cv
445.406 28.3784 li
445.406 23.4502 445.043 22.8281 441.101 22.4131 cv
440.944 22.4131 440.789 21.3237 441.101 21.3721 cv
444.005 21.6338 448.569 21.6865 452.514 21.6865 cv
455.315 21.6865 458.013 21.5791 460.4 21.3721 cv
460.138 22.2056 460.138 23.2935 460.138 24.0728 cv
460.138 24.4873 460.089 25.6289 460.138 25.8877 cv
460.138 25.9922 459.153 26.0425 459.153 25.9404 cv
458.843 24.2271 458.219 23.3984 453.189 23.3984 cv
449.816 23.3984 li
449.66 24.2798 449.611 25.7305 449.611 28.1694 cv
449.611 32.9443 li
452.202 32.9443 li
456.561 32.9443 456.871 32.8398 457.289 31.1792 cv
457.289 31.0747 458.275 31.0254 458.219 31.2847 cv
458.064 31.8564 458.013 33.4614 458.013 34.3423 cv
458.013 34.8135 458.013 36.2119 458.013 36.5757 cv
458.117 36.6274 457.028 36.6802 457.028 36.6274 cv
456.662 34.604 456.356 34.4497 452.202 34.4497 cv
449.611 34.4497 li
449.611 39.5854 li
449.611 44.5664 449.868 45.0322 451.63 45.0322 cv
453.656 45.0322 li
459.623 45.0322 459.777 44.2021 460.349 41.6606 cv
460.349 41.6069 461.388 41.6069 461.388 41.7632 cv
461.23 42.7505 460.814 45.293 460.555 46.0693 cv
460.4 46.8511 460.138 47.0044 459.464 47.0044 cv
cp
f
470.501 22.9819 mo
470.294 23.71 470.193 25.2153 470.193 28.0156 cv
470.193 34.2407 li
470.658 34.2407 470.968 34.2935 471.644 34.2935 cv
476.778 34.2935 478.804 32.3218 478.804 28.793 cv
478.804 24.436 476.312 22.8789 471.798 22.8789 cv
471.23 22.8789 471.073 22.9282 470.501 22.9819 cv
cp
471.694 35.7983 mo
470.917 35.7983 470.658 35.7983 470.193 35.7466 cv
470.193 40.1025 li
470.193 44.7739 470.551 45.7085 474.082 46.0176 cv
474.238 46.0176 474.343 47.1089 474.029 47.0044 cv
472.835 46.8511 470.193 46.7964 468.529 46.7964 cv
466.246 46.7964 463.706 46.7964 462.043 47.0044 cv
461.735 47.1089 461.89 46.0176 462.043 46.0176 cv
465.416 45.6558 466.04 45.0322 466.04 40.1025 cv
466.04 28.3784 li
466.04 23.8662 465.216 22.3223 463.4 22.3223 cv
462.984 22.3223 462.996 22.3315 462.426 22.4351 cv
462.219 22.5386 461.968 21.5859 462.272 21.5015 cv
464.055 21.0083 468.337 21.4009 472.318 21.3721 cv
479.319 21.3296 483.058 23.6055 483.058 27.7559 cv
483.058 30.3481 481.189 32.8916 478.126 34.1895 cv
480.205 39.481 485.768 46.6416 490.285 46.6416 cv
490.439 46.6416 490.595 47.6279 490.285 47.6279 cv
481.775 47.6279 476.312 41.6069 474.598 35.4849 cv
473.667 35.6421 472.472 35.7983 471.694 35.7983 cv
cp
f
496.621 47.2646 mo
496.568 47.418 495.945 47.5225 495.789 47.2119 cv
487.594 28.4321 li
485.727 24.1753 484.531 22.6738 481.421 22.4131 cv
481.263 22.4131 481.107 21.3237 481.421 21.4248 cv
482.664 21.5791 485 21.6865 486.607 21.6865 cv
488.889 21.6865 491.746 21.6865 493.301 21.4248 cv
493.613 21.3237 493.613 22.3608 493.351 22.4131 cv
491.639 22.6191 490.656 22.7217 490.656 23.7588 cv
490.656 24.4873 490.861 25.8369 491.952 28.3276 cv
497.607 41.1406 li
503.208 28.3276 li
504.455 25.4199 504.613 24.6934 504.613 23.7588 cv
504.613 22.8789 503.781 22.5674 502.07 22.4131 cv
501.914 22.4131 501.755 21.3237 502.07 21.4248 cv
503.263 21.5791 504.871 21.6865 506.527 21.6865 cv
508.864 21.6865 508.994 21.6338 510.781 21.6563 cv
511.11 21.6597 511.043 22.4131 510.886 22.4131 cv
508.451 22.6738 507.047 23.8662 505.025 28.4321 cv
496.621 47.2646 li
cp
f
525.878 47.0044 mo
524.425 47.0044 521.988 46.7964 519.081 46.7964 cv
515.138 46.7964 510.418 46.7964 507.514 47.0044 cv
507.201 47.0044 507.356 46.0176 507.514 46.0176 cv
511.456 45.5503 511.818 45.0322 511.818 40.1025 cv
511.818 28.3784 li
511.818 23.4502 511.456 22.8281 507.514 22.4131 cv
507.356 22.4131 507.227 21.6597 507.543 21.6563 cv
510.38 21.6118 514.981 21.6865 518.926 21.6865 cv
521.728 21.6865 524.425 21.5791 526.812 21.3721 cv
526.552 22.2056 526.552 23.2935 526.552 24.0728 cv
526.552 24.4873 526.501 25.6289 526.552 25.8877 cv
526.552 25.9922 525.568 26.0425 525.568 25.9404 cv
525.255 24.2271 524.634 23.3984 519.601 23.3984 cv
516.228 23.3984 li
516.074 24.2798 516.021 25.7305 516.021 28.1694 cv
516.021 32.9443 li
518.617 32.9443 li
522.973 32.9443 523.285 32.8398 523.699 31.1792 cv
523.699 31.0747 524.683 31.0254 524.634 31.2847 cv
524.48 31.8564 524.425 33.4614 524.425 34.3423 cv
524.425 34.8135 524.425 36.2119 524.425 36.5757 cv
524.531 36.6274 523.441 36.6802 523.441 36.6274 cv
523.077 34.604 522.764 34.4497 518.617 34.4497 cv
516.021 34.4497 li
516.021 39.5854 li
516.021 44.5664 516.279 45.0322 518.043 45.0322 cv
520.068 45.0322 li
526.033 45.0322 526.191 44.2021 526.76 41.6606 cv
526.76 41.6069 527.798 41.6069 527.798 41.7632 cv
527.644 42.7505 527.227 45.293 526.966 46.0693 cv
526.812 46.8511 526.552 47.0044 525.878 47.0044 cv
cp
f
102.042 68.3877 mo
102.042 72.4219 98.9961 75.8271 93.6953 75.8271 cv
89.1045 75.8271 85.187 72.9346 85.187 68.1865 cv
85.187 61.2246 li
85.187 57.4648 84.7544 56.9521 82.1831 56.6377 cv
82.063 56.6377 81.9839 55.8438 82.2192 55.9224 cv
83.4463 56.1216 85.3438 56.0825 87.1265 56.0825 cv
88.3906 56.0825 90.3716 56.041 91.3198 55.9224 cv
91.5596 55.8438 91.5596 56.6377 91.3618 56.6377 cv
88.6694 56.8726 88.4341 57.6646 88.4341 61.2246 cv
88.4341 67.5156 li
88.4341 72.1416 91.4385 74.2002 94.4863 74.2002 cv
98.481 74.2002 100.58 72.0654 100.58 67.9912 cv
100.58 60.9492 li
100.58 57.5454 100.146 56.9521 97.5728 56.6377 cv
97.3774 56.5962 97.3774 55.8438 97.6104 55.9224 cv
98.8384 56.1216 99.7485 56.0825 101.488 56.0825 cv
102.718 56.0825 104.021 56.041 104.931 55.9224 cv
105.249 55.8848 105.091 56.6377 105.01 56.6377 cv
102.281 56.8726 102.042 57.7432 102.042 60.9492 cv
102.042 68.3877 li
f
138.192 70.1279 mo
138.192 71.5898 138.231 74.2832 138.389 75.5449 cv
138.389 75.666 137.914 75.8271 137.678 75.5869 cv
122.917 60.5928 li
122.917 70.1279 li
122.917 73.291 123.196 74.4004 125.925 74.6367 cv
126.005 74.6367 126.084 75.4678 125.846 75.3877 cv
124.936 75.2705 123.869 75.2324 122.643 75.2324 cv
120.902 75.2324 119.637 75.2324 118.368 75.3877 cv
118.172 75.4307 118.251 74.6367 118.368 74.6367 cv
120.981 74.3623 121.376 73.4902 121.376 70.1279 cv
121.376 59.958 li
121.376 58.6138 118.884 56.7969 117.54 56.6377 cv
117.419 56.6377 117.34 55.8057 117.578 55.8848 cv
118.806 56.0825 121.101 56.1216 122.801 56.1216 cv
136.61 70.4072 li
136.61 61.186 li
136.61 57.7847 136.213 56.9126 133.64 56.6377 cv
133.445 56.5962 133.445 55.8057 133.681 55.8848 cv
134.869 56.0825 135.857 56.0825 137.598 56.0825 cv
138.866 56.0825 140.208 56.001 141.083 55.8848 cv
141.475 55.8438 141.278 56.6377 141.2 56.6377 cv
138.431 56.835 138.192 58.019 138.192 61.186 cv
138.192 70.1279 li
f
160.975 75.2324 mo
159.193 75.2324 157.296 75.2324 156.028 75.3877 cv
155.709 75.4678 155.909 74.6367 155.986 74.6367 cv
158.599 74.3623 158.994 73.8467 158.994 70.1279 cv
158.994 61.186 li
158.994 57.4258 158.599 56.9126 155.986 56.6377 cv
155.909 56.6377 155.753 55.8438 156.068 55.8848 cv
157.296 56.0825 159.193 56.0825 160.975 56.0825 cv
162.161 56.0825 164.219 56.001 165.129 55.8848 cv
165.447 55.8438 165.286 56.6377 165.206 56.6377 cv
162.476 56.835 162.2 57.6646 162.2 61.186 cv
162.2 70.1279 li
162.2 73.6465 162.476 74.4004 165.206 74.6367 cv
165.286 74.6367 165.447 75.4307 165.129 75.3877 cv
164.219 75.2705 162.161 75.2324 160.975 75.2324 cv
f
190.188 75.5869 mo
190.146 75.708 189.668 75.7861 189.553 75.5449 cv
183.3 61.2246 li
181.877 57.9819 180.966 56.835 178.594 56.6377 cv
178.476 56.6377 178.354 55.8057 178.594 55.8848 cv
179.542 56.001 181.323 56.0825 182.55 56.0825 cv
184.292 56.0825 186.467 56.0825 187.655 55.8848 cv
187.891 55.8057 187.891 56.5962 187.693 56.6377 cv
186.39 56.7969 185.638 56.8726 185.638 57.6646 cv
185.638 58.2168 185.796 59.2441 186.626 61.145 cv
190.938 70.9189 li
195.211 61.145 li
196.161 58.9312 196.278 58.376 196.278 57.6646 cv
196.278 56.9912 195.645 56.7559 194.339 56.6377 cv
194.222 56.6377 194.103 55.8057 194.339 55.8848 cv
195.251 56.001 196.477 56.0825 197.743 56.0825 cv
199.523 56.0825 199.8 56.0825 201.026 55.8848 cv
201.265 55.8057 201.188 56.6377 201.065 56.6377 cv
199.208 56.835 198.141 57.7432 196.594 61.2246 cv
190.188 75.5869 li
f
227.273 75.3877 mo
226.162 75.3877 224.305 75.2324 222.091 75.2324 cv
219.084 75.2324 215.482 75.2324 213.267 75.3877 cv
213.028 75.3877 213.149 74.6367 213.267 74.6367 cv
216.273 74.2832 216.553 73.8848 216.553 70.1279 cv
216.553 61.186 li
216.553 57.4258 216.273 56.9521 213.267 56.6377 cv
213.149 56.6377 213.028 55.8057 213.267 55.8438 cv
215.482 56.041 218.964 56.0825 221.971 56.0825 cv
224.107 56.0825 226.162 56.001 227.985 55.8438 cv
227.79 56.4795 227.79 57.3057 227.79 57.8994 cv
227.79 58.2168 227.749 59.0903 227.79 59.2856 cv
227.79 59.3652 227.037 59.4028 227.037 59.3262 cv
226.799 58.019 226.324 57.3853 222.486 57.3853 cv
219.914 57.3853 li
219.794 58.0605 219.755 59.168 219.755 61.0259 cv
219.755 64.667 li
221.733 64.667 li
225.058 64.667 225.294 64.5898 225.611 63.3203 cv
225.611 63.2427 226.361 63.2046 226.324 63.4004 cv
226.205 63.8359 226.162 65.0615 226.162 65.7344 cv
226.162 66.0908 226.162 67.1611 226.162 67.4365 cv
226.244 67.4775 225.417 67.5156 225.417 67.4775 cv
225.137 65.9326 224.897 65.8145 221.733 65.8145 cv
219.755 65.8145 li
219.755 69.7324 li
219.755 73.5293 219.95 73.8848 221.297 73.8848 cv
222.841 73.8848 li
227.392 73.8848 227.51 73.2539 227.948 71.3145 cv
227.948 71.2754 228.735 71.2754 228.735 71.3945 cv
228.616 72.1416 228.305 74.084 228.104 74.6787 cv
227.985 75.2705 227.79 75.3877 227.273 75.3877 cv
f
250.896 57.0698 mo
250.737 57.626 250.66 58.771 250.66 60.9102 cv
250.66 65.6582 li
251.015 65.6582 251.25 65.6963 251.766 65.6963 cv
255.684 65.6963 257.229 64.1934 257.229 61.5024 cv
257.229 58.1772 255.331 56.9912 251.884 56.9912 cv
251.449 56.9912 251.33 57.0327 250.896 57.0698 cv
cp
251.808 66.8418 mo
251.213 66.8418 251.015 66.8418 250.66 66.8047 cv
250.66 70.1279 li
250.66 73.6885 250.936 74.4004 253.624 74.6367 cv
253.744 74.6367 253.823 75.4678 253.587 75.3877 cv
252.675 75.2705 250.66 75.2324 249.393 75.2324 cv
247.653 75.2324 245.714 75.2324 244.448 75.3877 cv
244.208 75.4678 244.328 74.6367 244.448 74.6367 cv
247.018 74.3623 247.493 73.8848 247.493 70.1279 cv
247.493 61.186 li
247.493 57.7432 246.86 56.9912 245.474 56.9912 cv
245.158 56.9912 244.801 57.0327 244.37 57.1123 cv
244.208 57.189 244.01 56.438 244.251 56.396 cv
245.514 56.001 249.037 55.8438 252.278 55.8438 cv
257.623 55.8438 260.47 57.5454 260.47 60.7114 cv
260.47 62.6885 259.046 64.6289 256.712 65.6162 cv
258.295 69.6553 262.055 75.1113 265.494 75.1113 cv
265.614 75.1113 265.732 75.8643 265.494 75.8643 cv
259.007 75.8643 255.331 71.2754 254.022 66.6064 cv
253.309 66.7236 252.399 66.8418 251.808 66.8418 cv
f
279.404 74.0059 mo
279.236 73.8984 279.216 71.6797 279.199 69.5791 cv
279.183 69.3818 279.902 69.415 279.909 69.4912 cv
280.335 72.4785 282.069 74.7461 285.146 74.5479 cv
287.281 74.4131 288.659 73.0527 288.539 71.1572 cv
288.22 66.2246 279.535 66.7822 279.183 61.373 cv
279.011 58.6479 281.277 55.6855 284.91 55.4526 cv
286.643 55.3433 287.785 55.7876 288.849 56.3101 cv
289.097 56.4507 289.518 58.0522 289.646 60.0645 cv
289.656 60.1831 288.864 60.2339 288.855 60.1147 cv
288.364 57.9688 286.847 56.5591 284.713 56.6958 cv
282.855 56.8145 281.535 57.8115 281.65 59.6279 cv
281.956 64.3672 290.476 63.6982 290.843 69.3828 cv
291.051 72.6221 288.706 75.5869 284.953 75.8311 cv
282.779 75.9697 281.027 75.2119 279.404 74.0059 cv
f
311.968 75.2324 mo
310.187 75.2324 308.286 75.2324 307.021 75.3877 cv
306.706 75.4678 306.904 74.6367 306.981 74.6367 cv
309.593 74.3623 309.99 73.8467 309.99 70.1279 cv
309.99 61.186 li
309.99 57.4258 309.593 56.9126 306.981 56.6377 cv
306.904 56.6377 306.744 55.8438 307.064 55.8848 cv
308.286 56.0825 310.187 56.0825 311.968 56.0825 cv
313.156 56.0825 315.214 56.001 316.123 55.8848 cv
316.443 55.8438 316.279 56.6377 316.202 56.6377 cv
313.472 56.835 313.197 57.6646 313.197 61.186 cv
313.197 70.1279 li
313.197 73.6465 313.472 74.4004 316.202 74.6367 cv
316.279 74.6367 316.443 75.4307 316.123 75.3877 cv
315.214 75.2705 313.156 75.2324 311.968 75.2324 cv
f
349.793 59.8008 mo
349.793 59.9194 349.077 59.8813 349.077 59.8008 cv
348.801 58.4971 347.771 57.585 344.61 57.585 cv
342.702 57.585 li
342.702 70.1279 li
342.702 73.6465 342.943 74.4004 345.709 74.6367 cv
345.827 74.6367 345.908 75.4307 345.591 75.3877 cv
344.677 75.2705 342.662 75.2324 341.396 75.2324 cv
339.694 75.2324 337.755 75.2324 336.529 75.3877 cv
336.213 75.4678 336.371 74.6367 336.489 74.6367 cv
339.103 74.3623 339.496 73.8467 339.496 70.1279 cv
339.496 57.585 li
337.433 57.585 li
334.388 57.585 333.199 58.4565 332.808 59.8408 cv
332.644 59.8813 332.05 59.8813 332.091 59.7603 cv
332.212 59.1274 332.239 57.5786 332.239 56.7471 cv
332.239 56.6245 332.167 56.4219 332.128 56.2417 cv
332.106 56.1177 332.763 56.1074 332.841 56.2012 cv
333.139 56.5439 333.16 56.2012 337.433 56.2012 cv
344.61 56.2012 li
348.843 56.2012 349.04 56.5615 349.279 56.2012 cv
349.349 56.0962 350.069 56.1216 349.99 56.2813 cv
349.832 56.9126 349.75 56.9521 349.75 57.9414 cv
349.75 58.417 349.75 59.4028 349.793 59.8008 cv
f
384.444 56.7969 mo
379.617 56.7969 376.094 62.7271 376.094 69.377 cv
376.094 70.1279 li
376.094 73.6885 376.334 74.4004 379.062 74.6367 cv
379.185 74.6367 379.261 75.4678 379.027 75.3877 cv
378.077 75.2705 376.06 75.2324 374.831 75.2324 cv
373.091 75.2324 371.148 75.2324 369.884 75.3877 cv
369.568 75.4678 369.767 74.6367 369.845 74.6367 cv
372.456 74.3623 372.892 73.8467 372.892 70.1279 cv
372.892 69.377 li
372.892 62.1362 368.935 56.835 364.305 56.835 cv
363.91 56.835 363.554 56.8726 363.199 56.9521 cv
363.118 56.9521 362.921 56.2759 363.158 56.2397 cv
364.148 55.8848 365.216 55.645 366.165 55.645 cv
370.558 55.645 374.197 59.0479 375.386 63.4775 cv
377.164 58.5361 380.331 55.8438 383.893 55.8438 cv
384.527 55.8438 385.896 56.001 386.527 56.2397 cv
386.765 56.2759 386.527 57.0327 386.371 56.9521 cv
385.896 56.835 384.96 56.7969 384.444 56.7969 cv
f
436.34 84.1689 mo
436.2 84.0088 li
436.094 83.8301 436.158 83.5537 436.231 83.4258 cv
436.297 83.3076 li
436.625 83.2549 li
438.59 83.0439 438.59 83.0439 438.59 79.8955 cv
438.59 73.0439 li
438.59 69.8721 438.59 69.8721 436.623 69.6406 cv
436.441 69.6182 li
436.439 69.6182 436.439 69.6182 436.437 69.6182 cv
436.214 69.6182 436.134 69.2852 436.134 69.124 cv
436.134 69.0361 436.154 68.957 436.197 68.8965 cv
436.255 68.8008 436.357 68.75 436.472 68.75 cv
438.019 68.8525 440.169 68.9082 442.723 68.9082 cv
444.544 68.9082 446.037 68.8564 447.296 68.751 cv
447.638 68.7197 li
447.534 69.0488 li
447.411 69.4424 447.382 69.8184 447.382 70.3037 cv
447.382 70.5244 447.382 70.9678 447.406 71.1436 cv
447.418 71.2412 li
447.348 71.3506 li
447.283 71.4316 447.176 71.4717 447.027 71.4717 cv
446.908 71.4717 446.621 71.4492 446.548 71.2471 cv
446.4 70.4424 446.209 70.0996 443.113 70.0996 cv
441.121 70.0996 li
441.047 70.751 441.035 71.8379 441.035 72.9297 cv
441.035 75.623 li
443.159 75.623 li
445.281 75.623 445.302 75.5068 445.373 75.167 cv
445.403 75.0234 li
445.431 74.9326 445.505 74.8174 445.724 74.8174 cv
445.724 74.8174 446.097 74.8252 446.224 74.9658 cv
446.31 75.0596 li
446.279 75.1816 li
446.201 75.4814 446.152 76.001 446.152 76.54 cv
446.152 76.7813 446.152 77.2227 446.171 77.4014 cv
446.183 77.4854 li
446.131 77.5918 li
446.068 77.6924 445.948 77.7402 445.765 77.7402 cv
445.593 77.7402 445.376 77.7012 445.312 77.5234 cv
445.201 76.9316 445.154 76.6982 443.159 76.6982 cv
441.035 76.6982 li
441.035 79.8057 li
441.035 82.8164 441.433 82.8164 442.222 82.8164 cv
443.433 82.8164 li
446.88 82.8164 446.944 82.5391 447.249 81.1934 cv
447.244 81.1465 447.293 80.9844 447.615 80.9844 cv
447.827 80.9844 447.973 81.0332 448.052 81.1309 cv
448.123 81.2129 li
448.11 81.3564 li
448.023 81.9082 447.818 82.9941 447.669 83.499 cv
447.522 84.0459 447.265 84.1455 446.812 84.1455 cv
446.462 84.1455 446.001 84.125 445.462 84.1025 cv
444.709 84.0684 443.802 84.0303 442.814 84.0303 cv
440.805 84.0303 438.272 84.0459 436.506 84.1689 cv
436.34 84.1689 li
436.34 84.1689 li
cp
f
454.589 84.4873 mo
452.956 84.4873 451.589 83.9854 450.287 82.9053 cv
450.13 82.7773 450.135 82.5693 450.238 81.167 cv
450.272 80.7334 450.314 80.2314 450.339 79.7012 cv
450.339 79.6631 450.36 79.4023 450.778 79.4023 cv
451.18 79.4023 451.21 79.623 451.21 79.6904 cv
451.374 82.0244 452.648 83.3193 454.796 83.3193 cv
456.09 83.3193 457.603 82.6797 457.603 80.8789 cv
457.603 79.1592 456.05 78.2549 454.402 77.2979 cv
452.597 76.248 450.732 75.1641 450.732 72.9063 cv
450.732 70.7559 452.63 68.4521 455.459 68.4521 cv
456.964 68.4521 457.871 68.8359 458.56 69.2129 cv
458.867 69.3643 459.023 70.2686 459.023 71.9014 cv
459.023 71.9746 458.99 72.2139 458.564 72.2139 cv
458.176 72.1494 li
458.106 71.9238 li
457.86 70.415 456.878 69.5977 455.277 69.5977 cv
454.06 69.5977 452.767 70.333 452.767 71.6953 cv
452.767 73.2998 454.235 74.1494 455.79 75.0527 cv
457.533 76.0605 459.505 77.209 459.505 79.6201 cv
459.505 82.3506 457.345 84.4873 454.589 84.4873 cv
454.589 84.4873 li
cp
f
463.91 84.1719 mo
463.769 84.1719 463.617 84.0693 463.595 83.8457 cv
463.575 83.6436 463.653 83.3262 463.889 83.2783 cv
465.808 83.082 465.808 83.082 465.808 79.8955 cv
465.808 70.2607 li
465.364 70.2607 li
462.768 70.2607 462.676 70.626 462.455 71.5049 cv
462.382 71.7754 li
462.251 71.8057 li
462.176 71.8252 462.074 71.8262 462.033 71.8262 cv
461.814 71.8262 461.693 71.7861 461.624 71.6895 cv
461.555 71.5938 li
461.589 71.4629 li
461.652 71.1318 461.689 70.4902 461.689 69.6416 cv
461.689 69.3105 461.659 69.1641 461.606 68.9199 cv
461.564 68.7119 li
461.614 68.6035 li
461.7 68.4658 461.889 68.4385 462.036 68.4385 cv
462.205 68.4385 462.32 68.4756 462.389 68.5557 cv
462.816 69.0254 462.986 69.0361 464.476 69.0137 cv
468.603 69.001 li
469.068 69.0049 469.457 69.0137 469.79 69.0215 cv
471.2 69.0557 471.47 69.0264 471.746 68.5898 cv
471.775 68.543 471.839 68.4443 472.146 68.4443 cv
472.327 68.4443 472.448 68.4922 472.515 68.5898 cv
472.584 68.6885 li
472.543 68.8359 li
472.437 69.334 472.376 69.6104 472.376 70.3496 cv
472.376 70.6836 472.376 71.2441 472.417 71.5 cv
472.433 71.5938 li
472.373 71.6855 li
472.327 71.7539 472.239 71.8223 471.962 71.8223 cv
471.857 71.8223 471.551 71.8223 471.551 71.5596 cv
471.529 71.4854 li
471.363 70.6436 471.285 70.2607 468.603 70.2607 cv
468.279 70.2607 li
468.279 79.8955 li
468.279 83.1309 468.279 83.1309 470.186 83.2764 cv
470.19 83.2764 470.19 83.2764 470.19 83.2764 cv
470.392 83.2764 470.506 83.5107 470.506 83.7402 cv
470.506 83.9932 470.356 84.1689 470.143 84.1689 cv
469.457 84.082 468.364 84.0303 467.314 84.0303 cv
465.964 84.0303 464.933 84.0537 463.959 84.165 cv
463.91 84.1719 li
463.91 84.1719 li
cp
f
471.83 82.6953 mo
471.83 82.0127 472.357 81.3623 473.161 81.3623 cv
473.904 81.3623 474.464 81.9824 474.464 82.6328 cv
474.464 83.3174 473.874 83.9678 473.098 83.9678 cv
472.357 83.9678 471.83 83.3467 471.83 82.6953 cv
cp
f
490.523 84.3018 mo
490.492 84.2949 li
489.818 84.2041 488.781 84.2041 487.868 84.2041 cv
486.917 84.2041 485.843 84.2041 485.152 84.2988 cv
485.019 84.3125 484.897 84.2461 484.845 84.0957 cv
484.827 84.04 484.819 83.9756 484.819 83.9033 cv
484.819 83.5908 484.933 83.4053 485.123 83.4053 cv
486.66 83.2197 486.689 83.2188 486.689 81.5723 cv
486.689 77.4697 li
486.689 76.2383 486.49 76.1445 486.212 76.1445 cv
486.042 76.1445 485.804 76.1963 485.486 76.3037 cv
485.232 76.3154 485.097 76.1504 485.046 76.0068 cv
484.982 75.8213 485.022 75.6416 485.15 75.54 cv
485.417 75.3887 li
486.376 74.8506 487.694 74.1162 488.414 73.4414 cv
488.481 73.3799 li
488.594 73.3691 li
488.739 73.3691 488.959 73.4805 489.06 73.6006 cv
489.127 73.6865 li
489.135 73.8691 li
489.022 74.3184 488.996 76.3564 488.996 77.3711 cv
488.996 81.5723 li
488.996 83.2197 488.996 83.2197 490.564 83.4072 cv
490.564 83.4072 490.565 83.4072 490.568 83.4072 cv
490.727 83.4072 490.839 83.5918 490.839 83.9014 cv
490.839 84.2822 490.594 84.3018 490.546 84.3018 cv
490.523 84.3018 li
490.523 84.3018 li
cp
f
497.601 68.7412 mo
496.222 68.7412 495.331 69.6406 495.331 71.0361 cv
495.331 72.5889 496.599 73.5098 498.278 74.5303 cv
499.448 73.7559 500.066 72.6934 500.066 71.4482 cv
500.066 69.8799 499.031 68.7412 497.601 68.7412 cv
497.601 68.7412 li
cp
496.985 76.7363 mo
495.318 77.5898 494.601 78.6689 494.601 80.334 cv
494.601 82.3174 496.062 83.3574 497.505 83.3574 cv
499.268 83.3574 500.456 82.2871 500.456 80.6973 cv
500.456 78.8145 498.81 77.8281 497.068 76.7852 cv
496.985 76.7363 li
496.985 76.7363 li
cp
497.212 84.5693 mo
494.443 84.5693 492.273 82.709 492.273 80.334 cv
492.273 78.5742 493.531 77.0029 495.736 75.9727 cv
494.414 75.0908 493.123 73.9639 493.123 72.1035 cv
493.123 69.5078 495.236 67.5518 498.039 67.5518 cv
500.36 67.5518 502.249 69.2451 502.249 71.3281 cv
502.249 72.9385 501.411 74.127 499.46 75.248 cv
501.031 76.251 502.587 77.5234 502.587 79.6514 cv
502.587 82.4551 500.277 84.5693 497.212 84.5693 cv
497.212 84.5693 li
cp
f
513.308 84.3008 mo
512.984 84.3008 512.505 84.2852 511.952 84.2646 cv
511.173 84.2373 510.24 84.2041 509.349 84.2041 cv
507.297 84.2041 505.815 84.2041 504.292 84.3008 cv
504.292 84.3008 li
504.014 84.3008 503.889 83.9473 503.848 83.7969 cv
503.757 83.4688 503.863 83.3281 503.966 83.2676 cv
508.398 80.9473 510.287 78.9531 510.287 76.5938 cv
510.287 74.9785 509.394 73.9355 508.017 73.9355 cv
507.005 73.9355 506.231 74.3096 505.339 75.2246 cv
505.272 75.2939 li
505.126 75.3135 li
504.919 75.3135 504.746 75.1133 504.681 74.9785 cv
504.613 74.8311 504.621 74.6885 504.706 74.583 cv
505.925 72.916 507.311 72.0684 508.818 72.0684 cv
511.058 72.0684 512.687 73.6455 512.687 75.8154 cv
512.687 78.0166 510.509 80.4033 508.156 81.9717 cv
510.784 81.9717 li
513.074 81.9717 513.243 81.792 513.369 80.5283 cv
513.369 80.3672 513.529 80.2754 513.833 80.2754 cv
514.187 80.2754 514.24 80.4473 514.24 80.5508 cv
514.319 81.1514 514.115 83.3467 514.014 83.7178 cv
513.949 83.9707 513.798 84.3008 513.308 84.3008 cv
513.308 84.3008 li
cp
f
521.755 84.5693 mo
517.993 84.5693 516.279 81.6045 516.279 78.8525 cv
516.279 74.8359 519.68 69.7881 527.275 67.5605 cv
527.367 67.5479 li
527.598 67.5479 527.738 67.7725 527.771 67.9756 cv
527.804 68.1865 527.722 68.3584 527.558 68.4131 cv
519.746 71.3242 518.902 76.667 518.902 78.8281 cv
518.902 81.5234 520.264 83.4785 522.142 83.4785 cv
523.625 83.4785 524.585 82.1943 524.585 80.2119 cv
524.585 78.2715 523.623 77.0654 522.072 77.0654 cv
521.679 77.0654 521.132 77.2744 520.906 77.4189 cv
520.767 77.46 li
520.537 77.46 520.271 77.1123 520.238 76.9785 cv
520.199 76.8008 li
520.368 76.7051 li
521.031 75.999 522.168 75.4912 523.138 75.4912 cv
525.731 75.4912 527.13 77.6357 527.13 79.6514 cv
527.13 82.3154 524.668 84.5693 521.755 84.5693 cv
521.755 84.5693 li
cp
f
428.54 82.6328 mo
428.54 84.2363 li
82.4395 84.2363 li
82.4395 82.6328 li
428.54 82.6328 li
cp
f
69.4146 84.1914 mo
0 84.1914 li
0 0 li
69.4146 0 li
69.4146 84.1914 li
cp
f
9.93945 74.543 mo
9.55469 51.0713 li
23.2485 56.1152 30.251 66.5479 33.7563 74.752 cv
9.93945 74.543 li
cp
62.2407 34.1196 mo
61.7202 34.1006 61.7178 34.7544 61.7178 34.7544 cv
60.6367 74.9834 li
35.75 74.7676 li
34.9492 72.2158 33.3364 68.5381 32.5483 66.7871 cv
54.0566 72.2793 li
54.0566 72.2764 li
54.0938 72.2822 54.1289 72.2881 54.1685 72.2881 cv
54.4438 72.2881 54.6675 72.0576 54.6675 71.7715 cv
54.6675 71.5508 54.5337 71.3652 54.3433 71.292 cv
54.3457 71.2832 li
54.1572 71.2139 39.1636 65.8018 33.1523 63.6328 cv
55.9868 62.5566 li
55.9868 62.5469 li
56.2495 62.5313 56.457 62.3081 56.457 62.0337 cv
56.457 61.7603 56.2495 61.5391 55.9868 61.5229 cv
55.9868 61.5146 li
32.2729 60.4746 li
55.7725 51.6235 li
55.7725 51.6187 li
55.9497 51.54 56.0786 51.3574 56.0786 51.1426 cv
56.0786 50.8579 55.8535 50.6279 55.5776 50.6279 cv
55.5381 50.6279 55.499 50.6343 55.4639 50.6426 cv
55.4595 50.6313 li
30.6821 57.6304 li
56.0786 36.3965 li
56.1968 36.3037 56.2715 36.1606 56.2715 35.9961 cv
56.2715 35.7114 56.0459 35.4805 55.7725 35.4805 cv
55.6343 35.4805 55.5537 35.5415 55.4224 35.6304 cv
29.0737 54.8062 li
53.4746 18.5859 li
53.5293 18.5015 53.562 18.4004 53.562 18.292 cv
53.562 18.0068 53.3413 17.7773 53.061 17.7773 cv
52.8774 17.7773 52.77 17.8511 52.6343 18.0347 cv
26.3799 52.7544 li
35.9077 20.0942 li
35.9229 20.0459 35.9336 19.9932 35.9336 19.9414 cv
35.9336 19.6543 35.7104 19.4238 35.4351 19.4238 cv
35.2095 19.4238 35.0234 19.5757 34.96 19.7837 cv
23.4238 51.2891 li
23.4238 51.2891 23.1128 22.4077 23.1128 22.4043 cv
23.1128 22.1206 22.8877 21.8896 22.6118 21.8896 cv
22.3359 21.8896 22.1108 22.1206 22.1108 22.4043 cv
22.1108 22.4087 22.1108 22.4146 22.1108 22.418 cv
22.0449 23.4033 20.6382 43.9502 20.1675 50.7944 cv
13.3032 30.1519 li
13.2065 29.8184 13.0142 29.5488 12.6289 29.6387 cv
12.1401 29.7529 12.3096 30.3843 12.3096 30.3843 cv
17.0298 51.4692 li
14.6772 50.3252 12.1587 49.4165 9.51318 48.7671 cv
8.86084 9.05273 li
37.2666 7.72412 li
37.2666 7.72412 37.9424 7.75537 37.9424 7.21533 cv
37.9424 6.64014 37.2466 6.68262 37.2466 6.68262 cv
6.74268 6.68262 li
6.96826 77.3799 li
62.731 77.1504 li
62.731 34.77 li
62.731 34.77 62.7485 34.1377 62.2407 34.1196 cv
cp
0 0 0 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 14.0.0%%For: (Tom Rask) ()%%Title: (cwru formal logo 4cblue no tag.eps)%%CreationDate: 6/16/10 12:36 PM%%Canvassize: 16383%AI9_DataStream%Gb",KG@0@Pp[IbYGRpIA-nY(#UBV)U$MGA\-jg)EfR*Aia7$E#;pn7*J@gE"h9WBg9KQl^T/e]6Dh/i<g>0S\JbqClVVK"0_OZL[%h3?+K4m64V,OP@>(!WO>O^L3k8u,on:c9%\8(/&o&A4cI)(GqBQFPMUcOPUHcaDEQW6"WkI["skIkq3$$1eM\0^`/RfAljM(OAd@%_r],b-D'I>O/4kNcNrr\Lk<qsdHABVgM<FAqb<C&\mrhrHlRK&/RFH&;kR.c*Bu_-[!Laj>6A`JmDD,44b>=bcff_H'a+LB(e=dg%Z$:;9X<&I..fT+s?a-`iOh`b>QQ&&)ijKeBJ(S66(?$F*b_2p:-LD9iUS2clQ(!(EecIP!)Snrk'TZ'fG;((0LLRJ[,*<9[@$Oh>%&P=CE0jI.5*rE"]rf[L&CNTj`2gWALf=EPmY<4Jf]DhsM84K?A<$mKp?As4^IlZ^"!)A3c%'Fcj[FlT<\QkKh0b>-8qAW9qEIe>3%^Tmp.J$(_bBZRd6PkYU07[<eonedLnK<l^_BQ.$d[)$8[!udj]"I0pR9r,Q1,7/lHe-@+h)#0!#N1`ZQgbrsT[Nfnpd-.T_\NAi`%YMDK&(dj91!>Z=cMg0\$I(-4O0BasH57g)R[-D!fqM.QNO<=hq5_K9e>Ob*q#68^@`uR"n!!s.&0#1itE(;bQ:4nZD!1aNjN50s(%THZu%!W0(4n6:EB7tEn0)#R&SiFaJ>5DqtpBe0JgO2^&3=:Dp'`UI*#L:)$'A.k2#-K2.=&sc-:@B!e#VPQ1,)-A5LJRpUp&$2>D%^f$R//-Wf):KXW!KVaPp=L2+_Di-tcL8Np6RSG2<D464JBc>U>,KAc_j2!n<\$2b%4pEDPI_nto-MRm?6'rognN.!gr.JW(7.:l,%/R\_4KeU>=p^9Ck5@I2%:UjsA&c@<$_uJ[o#SZP<@h\SI90p)G-S.X6n<l*tE9%kV(lK5(n.XElOQ4aKZ/`+JhVlPP3Kd"m5HkiT%%t;B]n-id)nN/jCn:+OI_C*S^`X8jViIdcl(PE:E5Q&GELJQhU/-Y!bT6M,+Q!h8araCj#%D\*!oHVTu*ZrB_/;<U@i<;T/7h8+M%a+aE0/PG\h91XP?)$ld$R1MD])afVB6MTId/;<=-_M<,_lbZG"#"%MD8sCpt%`TLV!E6Hq_\0(Be-8F'.0\1P`#$jl@_CaK@BAL<%1#Cj0V&>D'_deIuUu$+W\3>A&s59#LcG\4kk8`Ld[m6]QR!ocfa)tWnM-C_?P459o5,N4SmM5SN[1sUC3*hq`$-UIR^_'/*KXDP2%87Rq)/+nhT`AJkP$N5PUA#U:Ws$WXWNUf=5'9D22b5_6tbF;&\-d)Ja:F_'J/-"WokqrC1:.p#5`BX/\I\Zh%rtGh8\+2c_j78L.%pkeQ+r_kH0hobuo%jh7lnf5pqr5A2aInRQGrrBcH]GOF@8Ld"l#iYdfs.X)9Pf0[LUZEmE9uDH50DM-9TL>"/K"kbd:a[7gV.d,]%=l1]r=0YKh/r<acrWcU0s6)j%&]8JI1N^b#N;sgBmrCUULZ9g2_#H6^.YDau?&D,0G?>p;9>nWX;?Z[u+93XaN?La;Js'(QZqfWs%!?>[,!SCm'c"e#%0+e<I&/-de9ZKGk;-8`KVSJR,5@TZf*!O2S&lD(1rIVPTAJiB%@3+!E5+OsgS57$7TQcf;3E:f9UZ1c)Hj6i*%p7K-1Je4[i0j#OW/<Ks_@fS%;Ik]b7oW&,LK&>MTHl>>=cf"Zh.K5(V:'7'frR%ifg_.I4DD;@m'AEO>8^G2^1JuX`S;fp+`-E6:%$n3M0E<jN8dKP?`JTq=X/l?<g09m5kK)1Kogk-MQlnk;HLhAR\+G=^`BKR0f47!"!L*K6^0u:T_>M'kl+8,tQ*Q&De"h024:R)Kf%U-;t#i*RA>"A=R'7"%BONhUFtqDA&.7p_K1!;nLt47#O-j!(?DPsX\CBg>OWO2[MUPY5Lm5TC*p&sQ"R?tkQ1>RpCsV@ej8aO)Y7%\Ts=7!9Qn8/lQ=@FptuthC7AVPbMj*&`cNg(5=CMCFUpphZsHAbU`HIll1!bR)(VJEV'deRRXU0nm%KZ'Z>4tH$$8J=;&i$#/cHM%9:R"J&RbWq9KJ3SKkCFp!9[S&L("l5"-#5Gk:]G#dK5_g["I+f[1UZ\V7nX$n;MsjBN7\3;;TB(Ed?WV@CT6\k0&k4&\V]tB!<hJ%,bcQH5n<sE1h/A*WsOUj!KJ<dV'1'AdXY4.E!2=4Jg6'?@1J"i6b:5g^pXq@QJfe>Jg:K9/fYhM3Mld-a7<?T+`*j\7*<CaJT=hc%H/Q'F)2R60+?XTgYWS*'APmoC+eHK>A.St+=i(eSP4V#2QR/ZIPQke8br)4V>+/Sfa6>SC&rFb"N']Lt'Sb8%BL&:ng`iC1-uVE/%E";DB31gi@UR=TdOYdWiL>Z.@,"dWd1a5%O8N%`P:L`Nr?.^ca*mm4kNa1'lOI+-ehBO&1QLK^EB2TRfTJ#;O#SY2rVE-gP;0%L-%JT6[G!esCEAd[!NU2r/\8406h:;jYu+tgkh@1!%*$-PWj'S@WcF<X:[gcL0;T9_;=VLCK;/:AZ^VrLU^5VBln;riV-N8Ha\dr=@o%9Qa/FML$V8&nN`IA!3^RU]SIUS24%"_:!;@QkIhL5@G$:2+.YXL9ZI^>1JY373nD!&2p;>c8!Q=%+_OYIhIeBNCr4K;Vo<:9U-p'%#\H(A5##PNOU`m18r1&OYm@3U8DVYHM%h5I"`gA+H^H/<4KE`V:LcBcnWF]6+sD7cdPogY,#."*i-:q@`T=A4+Aj#n3Xf>jnJi]i%OfXe71n$P,OX_ff&fIZ,ejRT6TqPa?6:?\,T>EAijZ%npBuFO]k%#mlU+1%MgkkeHZmXTuaPNX;]#0sEEs1hKae=YsIm?bna'+(B%$aD;7:Ir"3e,nf?DS629%,r;e"'U(S)dmA4c9(*0,WV"\Q_b\Q3Nrb1_N^iMrf*_OpaqC!>P1'RMc`JQ%a#DuN)WZC)oP6<R[.g0%"Qk/H=%;4P/uu*L0Ooo'iGYZ),b/@J_l\hAa<9/9QM<'^;aCa^.iBZZl`m"<jt)(cB@o!+8YJC;al96rD'Wb%X$AG*Z0e"s/K+&;%QKbRUGlj$Jl+r<h7q#+"7uk;lX%UGqQK[o77;4,Pqq,]"nf6ZtN>RqEBj@'OBca*sEK#6X4(.E5o76]g@>Pm;m0uSk!7JN5=bIqp%6K/U`;&"@1U'H<f<:''=kS,V(FTp@3R#@\QD#5aCP+Y,7OYe^_ln_5cJ_C,$;'M'X3a9iP'%\@B0@<feR5%eJ[#l,L;oB@1CMY(:%NF%3a+_m5sQGJ['U,;Sm,T%[h8UX,cO8dI5R><6oN<mClVo=."#sPmp#2>E3s3$:iL)^Q7AJFA0Z&)mS1R3^pbe-m8j(j(Q%+I?_%A1%>PpCM6&\*=b$X\I@n.BWW*CEprh5^Ec'MEg\FD]m@H>6jAqW#=NP8`(lpa)m`jMme2Q5?S(ap$Y]+`qg'HXB8gq9pq#/HN6tt%_IONgpN]WiV;`]4jft-AQ3V7DRE+3B>TYStN22hhNTYWC.t/jq7rR[o0HT5]#k\#iPQRbo"1TW73^mu8caDUH]W1JVG^)43E%YM3%br&XJK81s7YO8aZ451B+h*1@[nuY+D$>bO_%Q>sYU3d<p](&Ei)?#g!\$'(H3um-ZWoL#=_(W7;%9:Zq:RFH&IEh7Kqke-lB#*nR%oNZ:EgAM330E=U8gWD=(7N(10?0JPGp.0'7s4"K4T@p\TDo":OhHf'[UGmCLj*GaPg/i=\ia_TpQCj4%C8f#-Ck**SfooN'hc$*_%k,oLsg:R[[Eh6Jg1;.#gQ"Phih3LnC#4LZFn2i"Not0,BHJMG*TdSBS)T)s=<faB_*XQZ?W\oTl:3Y%hKSY;A10UhFKM210qAV5$%;4GEANCqd`"r#<J0WIQK0PE$O,8>T,^T,Z:*hX<N=T7U2]#$BRePiWq_QTeR$SEh`r,8VPgMYo`rS@Oe$3L(a]?RUr!q?h@L%@FQ%kXr5=]"L#J%cI5_4+%;ZOo,]<#eqOY!LJl<DS!`PK5M&ZXFjQ)YgsNd`Uq0[jDX@9"/_.%JO03'URG7Dr[!<Zhf"#i6BOY+:U_pg%&ORe/Snj/=f^A'p5R`fTr3+#V+aZ\d&Vq.:%cVuF)2/o"9qB$/CB!]_h]'9acOj%l]5:Bm"t!G!5VV2C&X1)!DiTCVeRD+TJ?';X%Z..*,L+5e&b[B3jCC/3<QCM^?<W5$e"0O7uKpI^;<8\^hdVrt?3ImPZIp_)eW!"Pk9kM>l4Sq,CoLl@+Fg_30KTP:d+lq>(\4<\\%UuEX4aCOKHMkM(_5Eujh)esA%4]i*)s5aQ<ju_7<!#M):"HFk$&>d6KP?E*;,;I^e%[R(Zd+#T\hdS+gocaXa!E@st298W6+kOu)%C&Z$NO<%rfGIYS7gtPJ?Da*)]H@,5kdF-c*J9"Dt^%d*1g[">;E*[df>^,h8r&s%2?2Ap>kO0#'?^C,O%^`(E[rhA1mbZCJqp2g"%_<=[7pmaT)k:U->a16R-+BfJG&,8Eop(uJa^G0TnTE"W==0jio;=.^uR=1"Q7'>r";k*CDgl6u1M>bsnB/qs@IajXsbpKACj3agK%$jr@K(WD[eSsqXKnnNZ0p*'`pgn&2/LI&b!3[7ZRr'8Zl6sMC&.r^5TCOm>:#ON;:9<a+FdeW&8].o!0q0.l^PUMjslXVmlZE:I<%%6lDSk;t6siXI*,1#HDCCq[eI+ZrJqDcgZsL(7&F\B"+#Itug0*KUrnAAu:oV,JLpggDB];ZNdr>U82PL^mAZ+Yf"1"&S,Aa:X@l%R?mjb_t(Q\ZpAG3G9Bl(nATUi,MBZLW`@HV=<MtSB.bP/:`F)Ji5iPaPrP;77Ic>,/<\580OX[YnCD4Ung1>*&dlQ(gII2>**@<C%!?pY)O7-J)@RK4o-G6/Z,X0h1fZ]m)ON9?\dd%5g(&FhB:<,t=hR2KdK7TT]>T@,(H,t>0-LuiO?Wi3,"Yt\"MSPiD(Op<&b:Q*1%7W'2^k*Ym^)DNB+*DDAZQ90i`J&foc.nQPXEP2G"ZMu.Uebk7cUY9!us2e%F@LreD(<&'SO(>]@mB$#jH"9-Sk?9-!Hk6J-[(Bgg%3@P^C5&6PGLMuZ=^#'4YRf$Eqp?+5jjqXP7(McZP[M3>'aJ&P]>?763$Si)7]q"1abd$q`OAiY+@D%<KEVi[Up5(_J/p$_6!W;AU%I:?,_0m!&XjJL4sBI%&Ck$B9pldc5:8IKg$K$>>YQ$@AYq>Qk,h)C2L=W!/HL1p!8Sm6H`rP"I[.)#U8,T"CWOMs.j0OT6M[`>hH%`7$%`rr!QTi[*W!JXih:D0i/1*=[?hMhUo'S1qha;FZ'=1e#&2\Hq%(jd,nW-b`&,?V-q\hoIqhWVGA;OMl.@L!diac5`?e9h]G'%/;W\!KPAXXP5&,nH.O;OSh(;2&48;K4@7?\F)Ks!kNMo9K3.2hq`9c2#BdVkSs0+K]l09P@ce=`El3b2#!eR45Kn$b,=`su"bq4H%*HCni5=*4A[I&.RX&o2<F.GhPiOM-4kFf\AhbGPjQmV^q5i@Qs^EJ/B^bWiR'J6363oSfRhNUpsn#%iO.k(Wc\bf;.![3Z:>(7Pj%SjdNZ0p(dG=6TX(!2!NT)qNREjD_M1j8R\[a-R]"<L%KC8XMfQc[=KpY`!f;>ql4U2T)nNgh%CDM!!R%qe=H=j^sl?$29T)qR,)f%@h_O;hH9PC-2<PU%RU`R]^$gJg3#]GdR%i,+gsTO@lmBMa)-STLM6*9rWd:qq1I+2\K0huJR!)J=U8U2+4q&:q6+UiC&PR/0]Wei%]d@''LRANqfD9LA@E9U\HQH=-L\X<l@HMn7B5r+d3+0,t&`S^nC7p4XJ'2!iA$b[f%]`]^8bd?/pnl=Qs3Sd`iH#<rg%4P]H:MKO%/WP_b\`Xb,SR\&M2)Y(tT9HUGB\!eJ\Wgc#M7+N>NL3b5'(*F^dE4RrnD?.O=GVR*4BiAB[^=DIo#t.+rML+3V*%s-H+(*+QL`6d%SuENKSt3!ts"L]I%/bTg%<'?H,]&\@0=)*Bn4U4cO0d)\laEHipKt@1lS6/HS`MiVj$oRBj\?BUT#@#2E3Omk<F_.:+4'X@]@?Vp%3pYn**g%'Y5DitMcUdkGa,3:?OmORYN[2CfjTban_0>DK2L+3[Bj8$XK/VKK%_C^/>Wb)Y)56,A/6+S,3dd\G4=,^r[RE5%L/>!(%%u@KADg=Ul4<+ng0/ceY_9LbnZ9d@S9_5ters.Dn\-uK`Y;ib]S]+i8C2s1q2Zbnpg"8cA/Y929Em8FWPKt8kn-.M7?BiNMJHQ%l%GD3Li/!/62+peJ5aP_iuXqVU1Yim&/6I,?Jhnf'*;9f]Aj[(gIn[SkBB("0!7(ufLrj_P1V_YI=?$B%Rmeiu)ki+.59Z;C;17-/e%^u]V-!\Pi^4.^C4K1a>KA0\0,Q]mcZaku&*r359n,[B8ZEg5:$,\WK:aRcZir,]%Z=Y:j:!kDQ&?7mBSQ]S,"Bt8o0>XJE'd>8$4%6>h!/SMBpL+H%EU*.g':6K+!.YKlInQT0ahD?)fN!BJP%e=0eV0n7[n?"BV-o@H;*c1ZJ=5G[fA]!$#RGTUb<dr:.0e5uPE?88_)%)Y4tW]K;TKD5CgjD&IHm"!ZqVh/iJBJo4\HDSP`n44jbKS_`]Dg>,hJqcB-MZ,/EF[^S8g)8$Tgg+jSUN5kg1aN.BW1*j=;aaKX/%^3Cg38=FeRL&#)b58J(<J5jjM<;s'7>*9^L[Kh7@$MgW8Hs=7]e4&5*'oL!!g(@9#So.OBbmQr1UES@n@Y4W2>PrtKX9KN95MakN%r*<ZZI\@E8ZMa/&Qj=2=D3G^L@>B\<-liO--S$h02TrVT12c]UMVEqa)B?3uK/b9,Z]*Wij#5)jbqa1CN8#oD2@CS8l%oG#+0f`n%)2.kX6)_BY)(f51l=Z]\nUk=e5;E7aMYUG?SC-F9)Y59qa:C>!o.r5E!El"f0k\*>kPYgK?<='[?+]%aib;2dS"f(PF8h^LBU65N%WB2+-\2i03bO_Xo9m?T(o;<kiq;]blR`\9mG6R9]deQ]'cG`rCGKb/e169U7Vel6:SiJ+FkI7'D<I\N4gcp;Jrh@Ao6pL3`JKL8A%:OFSE1*ch&ZOlZGRVa!`Wo!aJml(dq3?Z)Y!Vu['J8h()L_V$MnSHsB**<mepCkkk5=;dNhf&RmVpIl#9dcOJ]ZeNZ%Sn``Z\<SI%Jrt_QPU+B$o64k\-]jEo9]'847H,"9,l_u@%^m%.V>i_I0li*,=SnYE.ZgIcJ);1B0*X<5^a[uq@pL[=)@I/,81oN5F)),\InEOi%*0=`.@i<cu"uV]4NFbrHB26N'W%iK^NW5A]-85of>5gq1XMZhGJa&_G?1M:G\2*"_90LPeGp\/`rsYRYQ\.'se5a4+NO^Z`KpGHo%9'rXpdZ&.j!J$V"It&hYM"o&^-8T+FT)BY8K,2#,TW@b;!Gi@gJel=&+GXXeo:9+C\H?eW[)1-Nm"bu\?_JW^jN<JZ##Kd6\P5<R%fHtVRf&=/'3VT2`IiY'@fgUgFG*)k/BmFf_%=H?oMrs!^U-B8IC5huN\-I7hOlD0]oB__aGsI2gs(F^X]MA%8QD%>H)q"O=G)qd'%1$<o(W#rKmbQ1,T]jh7CIes2#@[B43*/O*jQRN'FIJ..d.>W2b/Cu9s!W;@C$L3C";F$QFj3&.oA@sPN4`9NPbmEhi*PSAf[rhD2%%c>^n><7-MLQC*%r.tp@:Yh@,I%nO,jdSK$O*L5]*hNqLV8p(;pm)uYdc5C*JAq9XJru\bo/VA4cFps1O7W2f5d^1[%&!NAYO@q?%g93V+Y4$k7bP)[rLiASD4m/4FIj])U?N'EUM&1YI+=rTDZiXc`il.OBn>D*/jnTp<+N?H*@,9eRUU/2de,%^?j%%mdBm#-e=U0Ms%OmotQ*oe#/s8Cd!:@?51'Zo8=.*$quS!]%eKXa:[oJ7_d5@:OQcl%YY5KZ;#1MQG&c#tH"(;t/o`7k84hD_tnikXe9RWC(grhu7`%[tDf@^+,_l+u^>FN8=GFC<'=]Dgk!jr)%Ae%W$#WS\GZg5Aq$PoQr:#&)INt`4ZLEIC6g",k8mQd?sAV/_8SXC+Cl6!'Lr>`XMIR%DL_"\BhL)Yf-_M7gQ+@#-qSe;);>6X*!Mg3287>T.WpkMYDS6shm$qsMubApW[O_[aP*-CK%*5opjSB_ZrF><Y%6_hF@_67bPr'_%!UIPFSZFfcG-3Z&a0tnV`ML7)&,+H">[!RhUgp?]4M64<da)/-pq^"hO50Rp`I'7)k'q80(qqN5oiVO_\hB4c+BF:?2Wr&X^k"r;%(_C`es7d)t-O7S%Q\QK@pcQ.r+#YFqJ4.,j";Y`Gf?T@Y4RMBTeSOY2kE!=_B;muU9m;a.\2i03jFAe(kI^i$e=GL'!Gr`&D;Or`%e&hG^WQrJ>6SE@lS4?fIV_Zl@>gPG`K^_p$,$J<8\%$&_rV4iS)ibGV?5-%SW\omW:b<'#aASW29bAI#Yn2NC9o4@Z^<'/A5t9bQ%"f#&pYCg*]<CcbpO;:W$31#>W+tuh[fSROsM]sm)Eh_FJcqa1YqSMfZO2$00g5e8S,=lX4chek-B0SR!q'UsO(@HF+T=KdhL9Mhh%2?(U`\dK`*k'otAYnOAjEa]Qh,H.#d3!F7u\7cce1%1u_K`'QqV6TtNlu^]bH+M3!\/<=MaR+8@B7Xc[j'`N$RSc$6;AFf^b#uY\%;s4%<iYi>2(CMK_IN4W,;JsYUhk7<uP0Ue(c6E9'EE;k;/LJQlJQ^S6Sf*JJ"LgqG&&&"uGR.V[pkdSbP_fh?*XnIV@9CN:rnMmo%STFU5muOg$iqPR`ad#:<dY6ATq'S4IFT%C^Ii+lNbCd6N%2=2SJ5;b4\NpZ]JWA1cil;5r[6%4"E1IK:WfY&8o"7eSLM`)WiSst5%cN*nD<8kFo_d`[J4T[lD_4Vsne@YZfO-PT!mPC3:-g(SZ]5U>'G)fkN^7CbNi5ZH)ndZ`>j,U`Ih"Qko]+(@g>Q?lVgc'(O(i<@Z%fMH!&"!LQsB+&4/l*5iUU-[:tW+GbUGCKYMNW^EBh>fC*hiUS3e5^:`@.@NtK9DIS&brR1O$H2GIDoL7I00E(Jq(hQ&W/o9!Q^ro%nAR^+i:i"i;-9e'hh&/lq<]eZI_;//U;F<i%$EGf-hC=AK3(js"NF8hBa=f;,C3Aih/@<sfZa@o&ZPJt8`Sf493c8f#I\H*&K$l/%3@t+5ZibfWAM!VYLu6=@VG[g:Q/pSiDrM/Y2\A"*B.I9HIJ0cR7aJgdI^Er9<b1Fsb/3<d)t>/6A>K%/T\(+^Q\b\s4g+Iog)V)m%7Nn$*HnSaLmJpQ;(*S2;&4`9+:(\'2n>T'1dIbb@#qL_qI3sQ\$c<2pKPrrQMo=i4?c9#UMgdHN6h":>OhgY)=-EMB3m<U$BI#m7%#?ZqL*</!*e8;\Gr6:r5">1^;rg@85r69%3l?-<h/rPAHGUS]3JO1/(dkcdP2p(Fcrbg+VKrAZ3D$Q!TDKah6GJfT"VF%7U3bAVV%F:56'7.LMkh[(#C[q*Jo./>&l>H!cJE5*&;+A)t\B)thm'7`5BANRaHhgIp*/mH[LlcaqJ7m[a,o[*QOhlcm.MYc`aoN?`Z"']Hi%EF`Z$a(efe5*/U-W\Ag`9I+'RZ2a`1`m+!>P@OBr)]`qcNjtR!5EnS&q85bA/N)SVNjp,TYb3+s4?C[&*s:GLEaurab&cU:3"60d%Opc43-g^'AIDLjFQLFe`Ks9>K/EgRpm4X)I1*0/Z%lt&$B3EZg]]9LA.*X`s`ki8qe9WB;<QbGKef6G-9[3edkdK<Bmf-D+;(-+d%SIlTU[Uj%.,+A>+na)(nJ$JDGqlep1\%;^jm.S$-DgCol-:(cpZ3>(!n^(QQ#-VP!Q$(]gTeqD9q\-Eo*VWRtH(9iT)mr-;dLk+4%bMs`PDT-PG$Z_Z0QsNi.HkPWC>$a(AkZN8b%>iDod^0LP[N6Ha+XcJ%[a0mrA9Q':](9E_PK@3q(GbD%1B[]:])?W0;+O&$VF$>T%gJFDI.6JP(SM]kb1'UGQZ&F@C+uB#5N9]s^I$&XZfKLdns2Z;1j'GN]E5hAm0Hfj#=%FdY&u")$)>QCH0)1?A$%Qi\9TMJbNI"&p%<rl"MlOI%+!%;ND`/I<K"J5LPFI$(g<j+RfLk'C*^OUW;_<>`N$mf*>I^/e^`bNI"E>=L&3eKCQ+#B#,h,X.bgG>:u!n+i`ajRo;%J;/jED*iPQl#?]E([Q+r)jsMgK,^h*::LBE4^McJ#E/XpZHBSB*or4kH>fVNjg"koQ9Qq"9<)>XTT9G,Q!T$X[5bnF[O2=@%\Icn%k&j'doE.iS\@XgfF!`Nq>)3<H/;Uk<DcuSEHG380+s`/B8/`:ZdSQ,b.Z1boI"ggqTVc@][_\dj4O`^bRD]NfUAE8oH&ZRSQ)]qA%o/s1/`2LD54UND$Eii)o"'jIu$'SrH7)l:.),H5B>`9M&\@>IRiEGs=Z6;EVU7G&cKGBD)%"r;T71EtXLd5"-)[X2S)n1W:Qk`&c%canC(9e<K8<?u^Am65dN)\<NpfHtJU7ig\0&_Rn"(E<q\:q$rlGGkag&Qq\V'/b.]'=TU9/+-Lh&[a6L*?:VteBB'eqi>jb[rnr7%?*O^+^2m#!do#j^^eEI!qLWBqS"bOFeKQKaFh0`%TH#b&G(i+9Zn@6Zn2e!3.c'C[Tb]Qei`C[(MoAM$8Qe`^H`esCo'I"/6e5jc%\d&C#5RtJIr;X-YR(a9_#a;i=U/s%c*]"5<&XN<*5.9Ecs!%Y/*h_];p]jg7%&D)o8KBKr6<B93586g/;EZQ<=;hNU<@#S+kX3-.%h*Hh&.E8Dhphbm4X0Tk:,7ES,Jk]pP!,b]V#D0guL`e+H&eY>DeRB_:>.i2N+!^0O#n"kN-7Go52*ksLW/X3X(<5m#"_JXX%5#*"%1Cun?hN72F""Rt*N^D)"!to-T9bsK8OI4CH*e9u2a%9S-hdM>m$RB6r(mTIp&RD'".(M0pK1.fe2OLtp\+u/Pj!.%"KSi?-_e<T;%F/pCG>`)S^\!=U*$?F"QA3UnT*9\h&@P$^EPS$p188Af926%97WJkO?FbnNPN$fa!g@"*AGDYef@L`#Ylg$'uMM75ELbpn&c"d$&%&s9C0MOkAN?`5J4@l)V\d+Yd(-iC$YaoQ'AFVCHB9;*UiW@ckF(?u8D)YR@L/I3&UBamO4-j=18DGM:51R:ER\=^p@%$FY7>)&@h%WmQp5!7OVu@@>NQ.7"\)(0j"^f5=Q^fnD&3AW[#j$8gp!/%D9$"U<i!\kFaY"YM#/fm)MM\:%l@/?aqZ(m`TBjHPd("iR,^3b'Kt%JTYQRK=PF6_Se\C7M_Yl!q!7Vkb##h2$7>s4W^td"9L't$jKTT:[t\;9%cdE+O_&Toj*=;+nmkK":d@8!9*b3X'_LL*]Dih%$C`?%<.i=T0QK*;)<aP5#BDLfMTs"o8mX"2<l-^h_m0ksGn^h:7E?fB/;=`=b,eQ0f&67Q,7E\5f<^o(<"8m4eAJ<jdDKFgO7!SS3!0PZ%%?'aAK^^3%%Ze)::`>r?TdA;d;@V0Tc%Z<&(5rqcdh9J/f/s2MJ;OJ/;i7J>2kuUO&?%<lDS[`mNf&S85a&:aI%+mQE[oIG=:.)O%gebce-Z't:N7330?`=/&Ks!fTq0MT#0V'Vs&81KDI/e$]hS4-F]<TW9"HHsWB>HopYOp_XY63)_m0WPGMHqPc>"`0CP`r0$ggt'c%,efnQ5&?bMpi.fQQ_PpBD^6B2V5R8U^%<59eoKM@Trm*F?oZ;gNh^$L2n*)cn5>r)U%!AI?HqlUfm9p8]@SNd66!*A>ufXgTYFH_%p1@6I'qt:!=GYi<"8P,^*T[gt_OH$.\N6T\n[7]"HZ.rujXkVRUS_I0CT0uTF`i05ODbh#=6?'Rb@Mc:4!4*)/isF5rM>$g9`$=,%Nm!?B7DCsWND#h_lVsREleQ)5Kf>_#QF_ufd.+DJC.5.p\Xi\YCYTC:nu2?UqS[r'l^t#kp7\Aq9Y[dmlbV*P*lAH9*kT(QGFuWM%DC*SV`OGX6p.jH`>PAq/"#'XYET<37ZK&(#X/"4Sm8f/@JD[s;Ei8bgH]Cp2-H12\?F&CbUNW?oh;8M/reGL->$q;_j58't+2,Wu%hW4C\@kKuZD=me=-emTZs'`C+8qfd+=IsFO7f4@]LtlI?F>UQ1BM33HWTtDOc?>+S#0_#HAChV+Y_?D`f#J?W<kZ''iQg_23KQgk%^q:ZD-Wg%?7IJ:4F4J"N7[pH>W7ek8(BCh/gffD1EhC!>Sdus8p'Mn2ae21n=7%IPH!EK]KpeKSg>fs.@4t4IiX*#EMR^;uF6,*9%^AIZg*V%n0Fnljj0*]QP\?Y77oFR,P%HZL%.gMfFrRY>[Sa5+&mIpGA':ML<^nABI6:1#B'Ik*E"*dcL&Fo-o^d;iW4\L#,V.YJH%&j+g.-h!5eXaHo9mOr_"a.HptfiTaMS!W;"#GpUsI,h=TjD/P5PC+Sn"1+Uq4l3>n3pjQMc--)g7M2M$%@KD..#k'M+oX`qYZn9[%WL)?FT:f>!e%`B'I>qkF[d<RNT-O?96N#u%cLLheANY<[]oQbRS`oW90R6k'It>d*ku"D`>`Eq6:O$>W;_IOIIs:7S9>*lI3_Er!%7tp6fG4q(n0"9XJ<q;4p@6BB=h+Xj</ku6Qmt&e'5`U8I\p6H1`YTMYp8niaMf6^q]5j+hfda6h+/%9?m^>4hN"-^CeOoi:."\C7%-hp"q:-B)P%c:1nk']@cl2#&m3.LX$32)8$UGN]GDRSe=]75`lVnj?P$GGNg[F04rW:&LW%N;C[\hU_-?khs1WUf"Z6!*52:r:/L%:A1-G*3Hq[$[`<fQ/P=kPOWS3:N[N-4reR5@X$<r6>7=MY=1BO%hBAQ[b:"n+)pei-7#c.s6e:jOjrX]"-@"InCCh"WX-r<I_Pf%%<!mhnI5Gi7ZZ2)N2bpm7gf<BrU!)]l)jbch:R*#4F:?=nmPIP>-aPa>cGu>nlf3%ll2WP0O26EnrI1LK`8g8Trh;@,;O9IX%Y4?/%Lo2l^[R0fMg\S_I<Jb\ZrH#-(>!FN<58t2ob1KlNFn-JI)BEc_e'FMT2Zs>H\H<VO<2-@=/'^>+s.RgsWnLZBM,q-,T[DHs=?O>&%N.&%phqLlFd+`q2O;enGh=EN-bl`k\9#nsW6$fH!fL0X$/?`7[>eG'>o+lXB<!^e"]u$D@oR;!7T"A`l;mh7AMb*I(1*9`pXHfQM%CJVo?V-)!YDgR#Q,J+ZEbjIt&^>cm)CsV4nf"iZ[1\e9VKjkWo6pHn.C@iL[h*na5%Z9aY!B6;$$.>e@Y]LJ*^)NAHOW>R.@<)(8%,^37=KhdnVE%eF[D%epTn9]28D,^XuVM9hY`W0BImH!e6+IF!R3%0TR#(3k=)H1rJ:$>FWLMYHhqC,k^[TM-*'@kcjD\3i`$7^%(%3&ll9_<^g*N.O+-VqfIU$5R4Dp+3,-GTq7Yi:?.[!nW"E;VFTJ+?XAcZ&>8QI\N_#Sh%r#>[Hf&mMV.Wjcn[HUMhne\5VK:VD1HT%+<V%o\10kBOG]WA0eB3Cg;T-tcB6JYX2#,OT,AePa/L\pN5Aj@QnhFBg*ZO$UF@[8d9BnSik-[eVkP$QXR7N:M[DgFj:,4&>973I%(*8i60e>/u,ANMYeZ(?+dL/B%R!jc\\a;O)!Jj")=jn6+U'\XQgQ=Q_A%Y@0,F`?0)b.RNBe"BCl2Uka*Y\3Q-9oRYFC(#Z=a<-Z%.?&Z7l?GSW,*<D&\)OMP".UWa8X4-J554KlcU)+l[nYC8rpnUaJY^G?CFXBlAJOFB,]u+4aj;cXjpP#%I[+[aaT.+X\<,JGVVgOL%WAg*r^8o]XfZ2\XncQ6!q2p<fntrrB.THr_3q:Ygrb#Kl9Au;`?OZ4dq7:Ot0DheYTD!,_c=OXUaf2f&<1GVs_;Th&1OiFVe=[6q%>$$+]@Xn[jXY;?&.Us^2h7C8?V]LjN8k8g1MbsTP`51JBrqQ=0fZE-o0"i?ld2C,cVI)2`!,DBS,l8&pCYut^F+Dhqj?(/s;Q7i0%p:/U4+4\9bg-%-ZbF_4>Do\S&pX[WOW@R'#Wgt;e66U$p_nO6bdA?U'k@40K);afR]s#5ch223&m(K2m(MsWl/u[DmU)@2(4Xs/,%8erBC8Y/@k99'8DQ!T*4qm_:Mf\QuieBTt0DuSL#\@]5>($A2I-]KeM!Q[Gm.ul<FA*Q(Q*?b!,:1L=YGYl@90+t0t+D+BfqAuMT%K`Pon4lBHkp:o2T<t."X_&aBn5]&aao":;<<Gk_Ui/X/!<4!9&d5QF?fmM.,.@A,t;R\=BV9YpP!ou1DMJflGQiiJK$?\T<$a-Cu%oa`jm9$pFq>H;jk0Rek)1]=[?q`BA:n9m@JWZDo#CH2C<D?!RWnAi#pr:t(*MCrbSV&'KDF6cfjA)+._e`5dgnWEK!LZmP!R$Zge%K.$!BX#rU>Pk>jp1Di/*I%9t_Bj^0S4I_%eQD_SiFP!;#O95M_[b^CL:l1]/Cu6\h%cHjpo_m<'@nZ&cc+:g>\UXX:q33pRUiP51%[k#7BI.M%+50MP.m<:6;]6lGZl,fSY5VoY1)b4%%EZOcRaKb]Qd25Sujr=Y,d*!()RV7Z&cbi:0[sbe!;?b1:M;HBuB3]f02_LM&%cp>*1d1<c)(sP?CQHo=,L<H(Nd9O_N@Noj7L;^dj`X'+6VN*'.o.LhQk1<8N3*WlR?I_:`pV$]$VDi;(D7YtAMu*0c+1ES$,k1A)%buRj">Gsa#+aelefh3BG9;.8e0UFqNs,^5[,Ip,OMIL61&79DOa`U88S*c`!cODf1`]h($I#c.]<D'lt"MNYd5W'W8o[!5](=O*A%Vt%XW3-GO'I5*5K[uqbs`_u"1P#?=;oeW/^?@R.-3sX$^>kWnQ2h`P9p>%N!QPXB&S\T+5!4ArWh-rsu#Q/\;"m58k]>P3*WlU]$%Y#aS`n6*,?gc/G6\kcW)WXYWbp=II5eDRU]Bp:Y2D`PV(N:Vm2rk@0foepsTOr0U7omQmlRTW4A_P^K27PtG(0GBrrr/NGN#;bCf%m3;Iqm67@.@)fCZ^q?Vi)m#'C_gl3r>JNLL\>5b+hno4bUO/V]0ZgMiguj-E<F3JO)X#SoiG0i^E"rqVJLLfs=C^_S8Gfp@VX@H[%=Zq]n:!!/G%f%q`kk1nbTU1_OjBhQH2Rbin6mb25bJAH),ua&LDTfBu.["YXS"Gm5mXc`7F14FOg#PZ;;.:`'?@"J'70B1<>k[Ns%LF,\@@4%oYX\\;lDXIPSPYUccNSN\BD6/bTh;+8l/k^PZjF6Zs;EQO;mE='h;UdA!SSmc-FP+1'(#mhB@:J5g<]r]n;!54SBYTur%Gb>5f#SndB":4BS\UD,Vn!%-[+60?e0N82;:j5QH$<_e]Yn"rCU:]=9>k:-HlJ<sK_fnJMjc)crDQL%ll0$Ui3e5QV:k!^,=ssS8%M9h&UDAK[./oUI%+1oiX)XAFRZ0WRTbuVe3Pt2Zj/;0jl%jhF"YY#`'O2+0-*SpcV<XLYrEm,)U2Y3%a2tErl`G6h";Wn3*$^>?;%W!F7(.W#@pJVJ!4!ACNo[JuBDfc+6"?.g/nlNU(fKoZ]%W"?^L\NJMmLi3hj.[kXO<d^SGfZV=o.<%MoS=8o03=]fA,8f_Li$Mp6%^dYcV-r"4sC!S6AH!:sQa1%2>Wmfeadrq_HcNMa5(1:Z:+Q^p5?5<9oKeW8lQ;DS$]R#,4Y5a`506K$?]i&pPlciC9p`2EQ)m#]O%W/b3"m),[4ltJ3P:c^es$"HmcH<q-1j[dE^BCcoidY(s(JE1X%PIkpcYE8Ad';\'nkFI]!^"OgKc/StlV4l?-iCX\Q9.^85"NIiR%3_'M&@*T!Og9VNM!#P>Af#^;\kJU[,)t'V(c,R2>S(P8F2,[5ug/ZG!?%!BKYYG!)qt\Ij_s&XVWh%XRmk>6)b;K0cM\Y[>$879K%&GW+>=D/-sT;o(1oAJLlDC6:T2!bA]>-G_LnH11=N_T)sl:4&+.pSBgUZNd8,S<2FW);I_blD/,i2p]HokGY]fkD9]&_T-Y6^RU.%cb5ldWBDUZ:.8\HH$kp20*gD'd4,-dX([?h<urjJb$u@:bK!^b=K'Z/@.nYWa:ppUPgE0#k"\OBZaUqiea=^c*5/`t8-1RqmKKa]%Y(mc3\(OI@8mHs@*aPch<JM^jU\&_;7<.65BM>P:L[>T=40E,DPDj2Jr*^>SkiM-T@0_.;dH&GcTtcb>='8/+KAi`HQ&:#V]j/U$%R+1j*=Y3u&?UcCX8qJ]:p:DQB[L.F:_HrCS3Up_*/V(1oc3;#98\;QK4Pc/pOj7q)<k6<m"Du:=eup1=bfes;U$l>i.;4RX<7]+h%kma$EY%ld!f9hHa-6S!LV=P*BnR1YrR,!IpP"%q#o:=dKU"@=P[LaMsJ>WK3D3[nWMY)=2+@/BV?K(jrQ7Euac\9f0cUYlacpPH`%Pj^>TA/^_eog=eio?eCWj-.Jue]<=WbufG&%I#L,5Mpbk)R@nSW5\;S=J-/m.m#e@&7GSD8un(;I;4f,Q`"L=dTB1L9YXMidOna#%M1<V0(_9s<iuTV()dfSN5$Ueha20J-g^Afn]l]kJY@'7X>H-tQ^CJkJr;(\qD%:$j+G_iLpr3N)M-M-XoBFCgJD19Y6$LE*j@5Ut%/#D:$a3PC1o<b5c(p`sEi]oqVL-U,KKTk*OffEha=>p>PX+LNN=a1A'\IH!@?&VE#7_o^,EXZ\J2<TR0C!^4[;RoFZ*m2_srjq`j%=RYONQRoWlR3cW_/>pE8.AOFmH-m78na1egPKqd#_sGKYb\9FsalI([F&?ZeR?,cs2r%$m`6)olY&d^2_iq#i*H6CsL:W5`Vh:ZX%(^m;cZ%Xl4]1Y"f%`3=%S4CbckJ6*0#aX[?rWMH2`b+1>HRC3[.(U1$JUje^)f90H#*t!QUZX.]`$QK/Eibf`]rIm)pqF!_@TgY*%Ac@:^^*NG:2a>eE1W49AA#EK?4;NI^T8`K/i%.21d(KrqJ?cf6XeSecL:mTB[WbQYI3-*F)(DnQ$0L?k&`\PV5_'+(eKfWnYRaF"%I3>8F57;-q;KOaAmLp^+m3F?#m4dJJb5gphpjh7LIM!tKGrh0.!aKse8R?ggnjk(RhJ+O@CKiD"BT-94HQA>3gnPsFNXXt"U8T`@%@<B"V)2ErBq;]*3ZnhMt$c#6B2-tQ#T,kigR98B\RskiPATb5um52tU:2Oe$Gq$JAd2R&T409C+gqYUHa`F)L0\kK(<dO,hY,YR(%'`jCZ@]iH?pbcs]3O"!/k`(Id53U1-&TEi7f0Z;Ys(XmVF&,mg\!hk+gdQ0&h%u^W=4Z?K5=9d77hb-99]`^TK&_6RR!JsCB,c*J%i?4?IngpmO%_!)BjgT<cO-bRMi33eB4ha*LJ\PR\jhao*5[MsoJH*2B!+:d8>,Kn%eY08h.HFXX>U>S(h:H0^G^C5YH\-t@gRufm%AR;Qc0\->nVd"rk]:Sm/^b>\hen9hC$P&8E:O%b$&`=>p=+Ii2frW!1WAbIe^HHl&SouVh$(VNVp@>(9P^;Ma\s/B'D4:QOf^"Mo%edog5VpC+)ftI^s==_eFq##ag2e\s#Y/<.Z&A"Db4-=6\WuQ\U:UgGWHK2P">N5W"i+'YOc;'06m;S@pJ9T$^FUqp?@(sb]ZIf4N%P'1`1^a!uYY>D"1W:R[k&''0).!Z2?_lOY3\E8F''-XBSV!]4H#OQ6F>I@4W19K04b_@mT<`#\T=lMq5R<h1j>1>s,&K@IaRX@pp%a7NloV0HAJ$(SS5omj'jWO9-j:-Gj#ZZMj1^;Y.f7]8)W=Xi=Uq=]38;<?.-]E?eITpka!#K+IancL=7Z7LfmCp?;OUf4UfG9f**%3=H"`L3!?2nRbe+`q?oDfg&GXZ-)$u"`ska4)$j?g0q!%@5UsaYOEkFWN)1#4FdVY[)`[G0f31e,!Sl^2*=Z"(g3cp8ei7l[su9a%+4mS@Tp(]X'^2VDJCKEER\kZBFGp2Nh,'-;Z`##;@mbCaO<`1)Yp4d27V`H8NXuK@6TH%;-mMAJ)5(F2+[Uj7'$i'-9f=1`XT`i&%1T;7bUmjgeG-g$*N22hP<npUi(goMtA?"]<QB`aE;+ss5E6&[]Q;7J418LKm#e3*ZWe`[Y";2GE![Fq/[rK/C@(JM%1j#^[l51RB%8u65Dol1W`-JUkrJ5D>aGp=kC;[,Q@&SWXY<4c2a85`=#",&F^#-.'ZD-hA<In9*S@@_cr;8M@M709H^ar7Yh:X2'H*J\*oqAO9;%"h9*dEslof>KhD:K/nTg@-%=MN?,N!bV.%&beU@SHD$.:1F)Zsa\S'pQOC>)&?naqWGUu\2g,^_%H.Nb!/m*Ol5DVUb&dmX#U<>>%!B949XuZR#G7,C,U;a^Uke&.[h.(oOPO&9b!iEfB`b=.RK>TbjPgG738i*ud!Pm&!N/m3Ph02BWn_aN+:D"cdj"7u,ZoM2TK6u:e%#Au#9Ls<K)ll/^\Nn'P)lj9&C/msaQ2YkV;8Mq\H^]V94&8H2pIBMVhi56!W>]=K(Usc`O>a_;!FTFCODe"=>D:1K^!aYcC0E]S7%QRI7^\,Ks"C9Q61kiZ:7@-q6F&M'Yel/Z-UItod7d'c;A[=`,#aRac&T[LGuD\cYScL^i38,LK]`Kcq^62p9h%.PIN?_eY<nXEcc%fGT7o7t'[\V,m6W^Bq/uVmq!fh`9"PrVK[@0L]i]V.%(>?gL`54Sc=]`[/;sNkaV`@=NF<o?e01n_a/&4T<LdT#]H[68#Gh=Ppma%"OfZZ'6nkBG_1Y(3#1;`ouXn;a%,[8"oMDWCulc07c5J@7\7Y[;KQDeV5,X$nqP#VF="N5HLM%Y<-eO][jC^g[RXEs6SEj]L#[=2%Z`;]#`Hr9ASbmf->%F9-I.ni\`]k6JEhQSm4biQ+nZ9c$dEr9c(3LPY0'WPF:7q=%kI8#oVn4U=c`J@elP/uC\p[3-ePN^ZSK=m+%Rc-?g:3ShpUXcF"RW57g],Q+Mir,"_CBU\f]+s3Xkqqq=[C./A1%$lIHUH31eqpP.cjT,^Kl/9i;AYh#7\*G!j18dLBl_a.X69(d%S\@pce[nK$M\3$@Q!eLiYSk#,SCNC=-7O+AgXsltBl%#;[8EiP+Icrl.I9KneQ`#-H?9KUh41"cd!^<9V!&&S`jlCRHJ5&e4&,@m%<WpA<l>G]Y)?+@+HY(VSh+A/8OtjjL8,:2mY#A37+B")<pU?Z4V`QECd7.lA2sQVL^I5`(^A[q!UJCbLgD;^)8n1teX/hlQ]9I<5%n_8DJ52N7V6FoMX1Z%n@l!3K&j].KWf0(nVFT(9ZXdF7R;O-k(4(IoS?;iJ[pEP&c#Ml833`nlkQ"LE>[m?Xhe&:E>r;q1HIe]Qn%S_ia2e\b&hG.NAg7CgGoX9Ti>WH_i9DU^+8m<;[]:=CTPVl!Up:OnVSH=qAs>BQja)gB>r&B>`5>!Ik?9KT@Wil?&8;n-G@lLmD:%2%JrA-Cp0NHF7dc1@4Xj'"Xs2]"ALG2#LqelhquLosCu:ghAXPETQe^mMg=q*P>QW3X,,LmIiU0gKlc'ZqK3YG+X^T4[!?54fp<.%;5[f.*h+Z-VQbM[HQ,I%SNcC=:J^erEMmIKQ/NJim\j'N<tFUim)E\ll,rDB<nOq2*KQ!=l.QC/e?A2fjW12DU,i6GHD^qXc$nrS%dPs"l&j-'5D!="ZHqs?[e1&c<^&nh?Rl,\]'?[Q.!8<d4j4-WOHe(?j!1i7AH:Z5W6V?]Ef_=]RWg?n9`_7%o'XC5$V_0V:&Ed$'%HqD4n6^+7kle,ZoWE[^u4k>P.h/Mj%GIekV%dH)\BcK"7G]7q<qj5j5`gdYGSnLu7_+ps98?ZJ5ml.)6/^WaE7upuJ0Dd&d>3esd%(S5=&Y[d;H^Q#W2K;NScHb3P/ib`P'QR2[mH`Fa-%S1O('=L.`GAo4K^!^[2Wd<';<o-SLEjbko19Z,cl+L95NN\%phMN/FcGgsp%k-aMVR>f,>[rT=_D<$40;_U-"SehH*8Z>^--cP+Wl;N$+TP$(GlErTPhG.PHHEFVf?MceZi3RZTn5_;j.q.csEUPiirV5>51Oo;_%Mr.XLI=5Q>N(pqil@!Tsr,)?]aI'`u%<X9T0GZ*Jic4SDVgC/Dr9`0MG2!(.g%?N_Cg,T"mOoo_\'M_dmFo\=L\/$SQ[GAQ<U)(O%_s`@A%h+>`$VC>fXJ<7O_p+_qOA@5+;=lOY"nC?jdD"rd*:,RU+-C"UHj%b8=_3ZZV1!j,OUc]ga5C0u#!C+h,(9&J[h\oP1pOV8%pNJ6>>7Ge#S"!du=3<e"mpB`R+28HEfW><GN$1te"mb#[C]jL<8@Uu^k>i2)iKNnA"1Xp]A#Mj>H$+:h3X,(:)q!>K@^i(s#s95l%:6Va*cZqA3o_-,";jS<<\j?p;7^1lITr2DS.J.[fV+rO(Ff.<m:"6.YO2^F#C'<-$;,sO]p%;=];e5jMS]3LW-JkEghpZ]T]d+3+%O(qe)SZ^=5aL"lVrL7m9r'=`h^F8fC(=r9JZULdW[A8)Gd/)@:MS(3sPb:aeR!!^`hJ)iYpr^6JBMiFg%-VjD^(8<BJtff_[2UGB%(FrBQjWH+CP17ZU2G_[D1:@m2!@'OC<E)N,\/V1:WWZr-16n><FCUq(KSYIngaX'5!p+stUDVc9b0E&08[5[Eq!:?+-@jSKi"plo%)kGtcJ8Z_N2^kGmFeT1aIouk<f3oY.]Hq]N/T7lreS&^`6`EU>Vhr8VYt#f\]O']0Ds1sq7#MqjUG+;K$jN0t`'pI3U@NgBiA\4+%Kce*[Og26h(<7''!.t)GKN[%hO:eG2r8(c5.t.Ur37B%e3"-iB4gH'WC*[a9$,DUKFj*8n%R_`&pQ^e^-l4V87QUBRDG#dnD$43^%D>UhX#9WkoPCk&\VDG`eU<K:pr'C=p<r4_;n=`rkX\UX'"S5-gn*H;OICd('aKfPsoPs8SfWg)a,'PY;IN2@"Te)&'[R2\9f3fX;%2l:hDH(ABX;[hJDQOH^*(^Qc)_qp\[oT]$C7hr29'g50B"QK;:^hXK0%p:E/fNMr/)eG5C.mm\?:cB:E=$D[(J8@FVaLLi0i9mQa%I2j&`NQ&=4=5o%k,ba#u=(V\S5C7i'l5'h-^ML%t*\nU(?mp)`3E1h/O4VA(2^%kc6RauN5cC%(TpjD@2Uk9bFnfrb3_`R$Z>s`<%(71@%0ihJhi"LrZpEV9jN^GkIPWXm?mP7:22Q#XuAu4KW>UMsd_0:2@^/L)i)'/$T;RZCt\I<[`ZN9\A8jTgT@6bUPb4CMhFJ=g(%D4H*-3p6l!W,=.VZ,1's@U.11VMX/B<_fBd"<2gMr4A.nR)P:t4&HcHfH.*G=^f7CVd5-q(#EYq>!hO.A2^2tIQu84[9D!e;-r:P%S6muFVt$*U:DMN?<`2^;CJ1dSc%j6?Qjj?mIX+%$K/,4HU`l:7a?6Mq5M<Wpbb1Lu7m)8=Q$smF5q?JO"g*Wtjf#GG,K`oQdRL@X%`kkY4B$_7bPo,F,-,uZdM6Y\a(_bH*88&$$nnT5sf)r%d_3AT@Nh_;t[RtFF3G.\O)"W<_miaTmc+*?;5c`qCk=T04c&Tdj*+cJu%CPX"IC[G`E#dCZ'#WkMcJ`imbc^0=1JtZTY@!T3>@i*6`S@Efu"*&VF:i'7#A0<qf;EGHC[^<r/%B&JS6Y8cc-jiRXoc9^P[1f1f%Dm7>Sg=516nUSIEMeYm6qD`d9S9/-Se9F27Eiiml`^kKE1!&D=do=@,%S;nN7YCO]!<=YS09O"F+oiYfhmtUnh]1mcrN!pE\\seg%1oXh'7rL;UXJ]589E#JSkt/>FX@,L"2El&\-%ekVpmCj;JGKG)@7AH=WP'R5XSA,*9?lC<\oIjT3YmbrN>*-uUPZ*aL1?c]V33N-%id1PJ/W6)d8>Je.'N<Em>&5eV>I/Di8Y(_`AA8dG8-hPfr?JHCXp<4J#L3IZ\8R]&#)\H7O7[2?H/&YO_-$#$WW7'bNFp?NTZh&m%e;^nsql"2p#VGJi)#"&El"#3dQE`W%$q0.'CU%@]YF-(.YSU$86#0/L-eEm'a')EqV?;+iQ,+I,?i!i:`80ob;1j+"-HAKR#d`\5%";Kf=;1nqVm-OX*4P&d_)l[@'&9#K$.[SbUdcDVo/"4dE5RJe>g<h@_.0Mp0gnWDC0f+1#%P^P,l.4On.XOjI*N^o/N#a*H(+rVG%?-jDQklsqSo:6KO:^$Z<*o@Ydmin-r\@(D8g($WUXS!TM/5(LY*,d\i4&dsQ2RY-[-s(<OBT^/<-<nOMiN,%?H*Xg,[A.jiVcY^*%XiUDf=aec-A$o4.[,UZ1[54fXSEi=XKic#Ukbp4Q=<&sbqK2EXN%2KH+`!c;)FB'N;+=9:hQ%m9$T>G)Z05]'`b/aK^qH7+W)T7Y%L([5?8uOj!,oV%%,n^[4bNNHu<P7>0Q3rW,&0k80(-HE7Wcq2D,atEUJW82BZV%St7AA&Dqd@t\-(6^[_ffXYBQ3/(lo#"cbu_![%U3<mV9saJ4Y,pV"f`LHo"?^6r5r-^5TlJ"fW+M<]9tsPAr9!:F(18Z%6cG$CZc6i61H:q[P0lhA]"Bq1(,TX;>Y6JV-(,/[S(;:Q%0m!0L_9hScCTjQ#Ho81.M+f>]C$]RMdpCL\H34;Y@&Idqgn?WcNhU\J[N=+ijI2s-Fn'%JC'`^m/qgjc^W=+oE\'>ba&`CqjMkAS%RHm2a5$5'Eo)08g@7AgJF&a03SVGLoNU2#T=q&X:bTSQXp:ij3K$d]c6;fB>gEEolNEVH-ER`;+g/("Bf(!;6g+YK(gq(&DksG'C%W)IR.bZb48eQ\pQWh%&)nDD#Hh1<\4W)9NJV"s:[&Tld7[O?ta?-q*U.Z*46iGR#pLNO#R@^!0C`^j4eb.1J"q3`ViF0!hia9j)c%d'^.ub'#k;QFs;dFFq'm]N?Y\k%IXI2+N\V'%E2DMQ%FJ%n2ZJ>grQHc&kj?d"oC%8`fXRGM@_hFM"_-SS(&<AudkpZ,gqXCEb%K%&Q(Yn0ek#!+j)SY2VNOo[O,m$@_hpFk*E`9,1Jt8?;3\;,,>LF]rE8T?otof1A37Uq/WI[I4&%+UT`snYY_9aq5<%]-&9c,K+?&/%YK3EDcCi'fWm%&%B@NoD5po0LB$?sTcCg@V;J47JPP'iB#+ZAMR4X3>3eL2L(7Zt3c8pU',[8W8%\;K4K20N(S1TLk4/_p;2X*W#%=``f.1[%dUFu/7,)&S`0bOs#WEp0S\k`F&-\KTWg'52T'n+:Ah^mes<h$,AVIK92*&AJp]h>1-2J2^77*1?58On\M\jpL;s]iKB`%M=d,+g4&=dX0:1B;^00oVcE?nqohep(L]($IGbN0g87jK95,S`2*H>uc$e=D(C<D`p`?Nc6rcU[c?rm[CcD)#%>c?NAUu5GPW?p8%8q[=OIQ0/YO\tQe[Rm-t>6D4f$6i]Y[mA?a@:KVN>CG_YE0m"&B[4)=9^IFca_q)285.O;hNX./R-`sCfu>T3oenM2YkcBV*$AGW%Gnrf.Lfn4G?EVIeh3`?nf%-W/_9d?h3MB-DNSIi1:9WY%1UNo&;i;@=B(T$Ba'+ntbdRhuZ<5:NLIouW<NH7Wn]CS)8")@o-QK9k%!N9n[Qi'C\^uRUA40si-O3_3hZ.@e[cNCMqIt<:=;hehob1!M,pH!'=UpJRfbc8W'G\-HeEhfuR9S5Lt`6!`0#U\O.)<^PCjhs,$%#':3(7dn[QQrT"Ph?-R1R*Dd[B,Iu!R;k3hXRGT#0P5SEJj%+qJR;jS;n(:+>.Aj`0cOQ^MSR"Cp;WoPDAK^gc'PbS!]FG-OpKR&%[@7HuYi5#ec)3RG>;(-_=%*Y@SNUI]m(c.SkbH^P:"UMHU,WE.lUd9r@\5,_4%"?>b<0dHcXY070ZD:spC37Yb=X"&igf,OWV?("%'qC]R!WfSjnjMYGl!i[V447NEoDR#g.ottJRSr^M_se.=HCSE`OOd\pc%mjQI[N@m.!TTl=pYs'Ys!9o0YCneB'8&*)Nnh?&L!`<%!^V'$7fnF-X$`cs)67:+(m35@Q%X6>3@$[uenHjs5rjkER-m`$Vo:[6P;XTu>K_DIok/Igg$RoHMo`ifZ7CYkFr]mIlQ8h=OdXu,%%le5#CEbM6[)g824,E`'U_+L2=dZ([g$EjgO2r;tqd@/]%F$dTj!)XlRl)DMnj:8?S>YP;@)k5e7o.6;WTMm&T[-!]^\!u`V3+P9%YW%l!27GUm0rQAAn]X9>WUTCZ(Xb$oN=uM=!,+PoclaX(V4eK=g9XNr;sh2a-*N>>/$R2\YAWKD_hQ3N&,c(sob>>H$Yqc7ei!d@%Z'1W>Ha.FegT'Em=@oX@U?FE]K?5!N?_%_*O7O%RWH4:7B64()(ZiP#hOg)/m.91,GGrfQ&#\d[;eO%n"I0#f9pI<o3$6F^A`RXu%iGe4S4sTKroAOdGfVpGbl[1\Z.01pSoqhJ'g8ME.X6"I!E0I?:VYO]3=\g>oa[_L7@?rQ9^*iK7?r*RkLI0HQOdAI_,&MW*MOQW>%*XX&TiD)quG"dt)+CF*Hm5R,K`-aDI&O1[j(Mnm!/5hft)oCYso733V3WWVTm0W0qp6oMZnB<U+)Ff(2"M5S.187IdH25BmE]1RN%Zo&^UTiI-'$uDkM)_p;fei;1<!@'MP[:4=u0P\Wg)btX]\=K&@&@H!099YujKA%Kk%\GTE-RB19b^A*oFrRtM._UCn"P2H3!0b'q%2MXp:XZf`+5//?f26p]*Vo*LDC1N#HM3KP926mjefl[>JAdsrAS7SL&Io/]#op93b?@PgAlLbs)UgB6,")Sk&._<9Va$=Du/D0Dn%d]oM6(hg/jnFY.4JJ#2]74K;2%HT-FB8TYJKJ?tIIUO]G_UogDR8u,?_@ad>B2""8oddd6(!]MAIr-[*qXeU0*:7H<iEW2UEf7M=%KIoU.jGE@1)S$]Rm6l1NOK*-5Bm7t))RJ34W3KcIFp5bL29UU\S_,X8d'VcRadIMd&Y5e1[<2N4+'PU*'h,W'#=V/q`l^T)^ao<j%DiHOuB5nFNNT%(4i8FOd'=`?<H\2(GP:(U>.=6RI;hX%GnYP4&,NnU+6:WZ3-W%B&_@LmjAnFc/cun0+`G_3X1O^&.W\;ZHAgkW"%U=kKOLT2[)Ch;EPfe!n;du1)%s%`4Zgo+/9@@(5)]c?b6c'$oNXHMDrXYT6(Vfg66O#@/X4`^2M1@);aQ&AY@X#cMeZ/kfWhH32p%l;PLl51fWdV#"W2>LQ=JH?ZJHlmOn^SXOYh>[=u*8"\"gh/"k57WBYT`FQHnbEZe>n2AoXZWtA/AVM42h(\5\+'n;[9KVq.*eOpH%S?a"ecB#[i'<t]QC\Mrt%EgnoqZGSnn.t04Vt/*#D99_c89^fnKLnZEH(?*.7;7-tSN;J/csuZOOpJMOC+WP?'r(Sgr_/Sko4Xd%%7[o(%e8#gfQ[[WDdq(9[rLU'Qh?]]6<K+@JV0Sr-jG]g+Y-5?,N\CfAZJS#DLo9Vl,DXHi?f)QaaI,KU[S6Wlqb-"ki="A1"&B>t%m9KhTK-K/TWZ.*RWaL=+*;P[qYor(r,n7>q&n]VG7!cTrRuSU$o**fh7_*Wp4n)g@9kOTtbPTiCFHZeUq8q2<SRg2DSbY8:1,_2(%j\)rEN6hW7q:]XG]+[NF-C^#`,L;rUV[Q/eRk:Dd;e=Dq`ED[ofWWMr1WlOMg=nDf2P#t=W6%d/P&*1S>WTcD'kYUc1D6gIK__Wa%3hmiArUQf<F;C1j(M;,6)5ekmo;1,^7e:8B_j&Vd3hrRBYOL7Wdht#SO^C+[2Ot/o^,VVMb:mOD(g:G9/$eDuQ;J(9JY+Zdc7#%)%i/Z;)Zg!Ehl&<sTRO+FubM,"Cc6g;HMJP>K#0cfh:Rb(V_8p\"(Jk%1CcWf)`g$4qcDK&56X2Ss3JD)!)s7oG(n>P)@lBnJmLD4T%`"[$dFTA1tULm'_!$3U"TZi\M-IN>c"D$`%h6uc&gG6Cp\hK**+IW/(pXRs9@D:m<3hoq2P>tI6W/[58KJPBW=[=IVCe3KDi4`:0%5nT$,aW]neQQp*T]-1l>!;f^?/FZ'ObgpEL_Eh2^%us)UefWT\-?&p88QBs2O%:I9l>,gbh@8T1RQHXpbtR[QkPGic-&gYKG;ETI%Vn0Xk/s1%+1VooY_j2+pc$[dlUpRMP0V%9o4'b8%pnGA,`&PHmcB=?I[QfmZF#WKsE6%h1phA$a!g]f[W0,T'NpU2N2FqjW$&n:^%lOCX?\NBl!bupd>Ga7H:b.WSA6orem,2'.F]V'/R]t\;f$$5<$114tj$R[hQg>%g*AjF8Wq]+Z1:#7S#[==m/gmH/1@\.Fm6)Wqj%pKQ2hnXXA(eJIY.!f_WaDQ$`g8o:KPI'hSZ9U>LaWDDrQLaitEZfPjW`n=-%]'8E/TF)7tm':PbjDH`ISR&HSRtNlHSSLU[?FZ?H%bt60(e+gdY!C:4&@c<1(dKhY7RjLg+fj9`.hihPnhlC<<_rP7M0G?*T]tC9;`(fu&?Z@l7Pi,bXCnN-$fGo;V$BOFh0H>KPh:#rQ%qo[%$1SbLc.`TD#G77c?-8J],<hjhM4sf+k729FLXW!2=r+`>RUbN+R$ueE7Aa4b@Z,4+]Yd4CCiYAR-8/d'2gi58?@[@F6iuJ`M%Ce/fg*RVRN1Z*/LA3LphET]%IdDVo+IT,)[q*[\2jiu)*qA\j7\LEU;L-+_R3,7dfDR`X5HSrOtDW\l@-2ZqYi-5[b`%EPra3hGm%n2e+ZbT*C!7q#o6-e:J/.XR[tb'XU1,hC\?F+r>93LYY*!OG#&r.UoNh!!fCDT?3h_`!?C)cK)Tjis1MY$Qp=Bi0ruFhN='?c%Nt%WdDQeNnL3_9qX9-,MD9,SXjYj&N7hp`<hKOe^<NP.E-.r->og%=RrNj8hcT5,Yk@R&eg.`U"^6;d[1;qUo+K@<+1Y(f>>dL:hLV?%Cs=Xp[>?HT[5fGEmZBm^hp-W*UY6ak@")4i7HE&`lM#+^721T!>RNIl5qJJGL:NlN\jq#f/55`,4i\;o7q\^ioNBN63Nca\:9Jq3%W&!/+UmULfHYmn9d%>"J_)*Iaf(!ndV<Gb&^:G]]ghqAF)YkZV<^XEG0!?XIr1'Fs2]jJGp$?]@lJY=^-#N(7cTE:%>mjSGHp7-P%BSWU8&)/!]<3&()4`%jpg;Sj#20Y?Fc92?=nM+;f?6OT+dV3`ED%PHN2G:o6dWLFYZ@!1P-XkkGV8D-4Sa)F.<^2f.#IDpe8!hgO%p[:5B^.2"hRc`Mq?(*(u-/Q(Nf3:V=;ZM^[<qG*2JDaMOZr;j24>9DeKNW$GO76/u/GG41kd3Zf9fqH,Y=GWcVtf+-FW0,SC@]d]%_#Z&W&(brF$<]0@]#WLf5q*+]gbpa`/pFbHP*B02g\#7?r$E`cnahN;V'[A0'1Sn<\=d`TVc0/-I58M5l0Q:F6jKbc#\r[Rh.i#a%4.Z<cZ_@%-%tb.EH2^U"pm*S.+iu*ae^eS]\W^T/)0m@Rh98c$\(P)f$g5C[2bVZRb1B1mT\3)r`laWZV-36=G*\EUGD%??WQ@64%5\#?uJkt7"7C[]k!ko5^OApFC>7JaQ!dLF_M5ps6EFO]JRbXa9XB;$!)W*BF'3DYoJR2U7a-[2%9XtV"-Unci@*;oCNV$1.EdnNn%3$`HnDhBR#5Vl[,.=]0*['tU['%`R54pLW-8Gm(hF03Vm&QsiKJA=IT]T&$^0uWls[U'>X9TrH:m#W;LU*s[!_UIMOFpL8&I0Ypg%@9.8>&*7fl,L],u@&)2$$!+`J_O^Lo\VWS%F;D5T</!4n%%f@e-Zc+DNW.$/"RV*6W=),f#__:aD159admUKg_8mZphjHg&$>=YU%JqG$n7i.(c$q])91>Om,DiJOfUlkEJ6pR(@Mt/+!2J"B$KV\eU5HqkXa2.[JXRFKbR*E=aX/bd3ll3:C7E;baI6M[_6EA<5UjXkV%K>q_./tHFpmQMX](h4#OKOMHr\TOjm!>P4MPZ`O43Io-4OI.jZoo4:'eMgJD+DD>D[..[>2sM:7QGcpVUcEr`\!YiZ!Kt`i@BM"u%(8-L.R)f<8bd+Lu!jj>%P>f^HAH@tV!##.L-ED(93Ip+&jF)Fm3r;Lg`"u_%B6GNSf3ZTi)MO[J;EgG6`1!1g;Ei?bCk(eL53nKP%YI]r/ST/:g"5[*bb,=-@nRjK91V,1(lS%?U\A*'=9DNZsd[f0f[@Zo5Cf5n.p\IH!=C6),Pj,l1%PtZ0k\M[7Xa[UI%AhkG2p6)C%npC<dZgJ+fZE_0rDs"C"M!jrB4WEZZme*p#e^((\kumHIZehu9n$nkW?9`4X?*f/sL3rm[rX<`<e)0g\mCdu"qjC:[b88t"B76i<%N,_Md?9`5(ltueH^":RK+OnRNh!8U$Wul>1V9Q]&eiV1L3Jk'^S8E_UT.4>aVL/9k)'tKUqG!BC2K>pmFaV%'"=e'YqH;NL75XmK%E3Go,>)JO@ph%itTClMT<@\8'Dn>i@SDL;\PVY)>]m^_a!\URfZm<98ch^[,Mp+]^/?sEMk([B4K.JaXHi:$aoeW&'C$tZ#g2IL>%@@k\iR-%^>,E>j6T$3Xg7^b"P>2Pt:?9db0/sYLil!?RXgICo62#$O&julg7Y,8k`c`iZf\AsKWh!8V/MH)P>4)qHrZb-P!DVHhS%f2';='=[gpp=L1dU"S\QNjI02g7Mf@0f6k_Icf[Z3(\$,2AGWQS';j!^":RglhO3Aos;B_cf';";u4o\$[2)I5A+'fl'p+lW&+=a%IekU#mB(hlR?(;%lSlKsF)nIV[@)YC2kBnR5C$Lg\,&*H[E8>Q5A,8Fe)'D'IB26Vp[OBXf%0Tcc(5?)DtS1>Y!k=nH*Y07O6GqP%Jp[HtDtPoD^e]$TTCo=8L0ADNHi:$aos6[AMEL(DnlA!*\Ss@\lUMf$SFKoMe!Z^gH#ee4-g=sP0A/L%H`s'L@0kuI=5<+SD&B;(%ph%+hDZZ2m>Q#mL7]*iMc[*Q"QX)]G]meQ0JT]YR;r?nRJ?b=B`hpE#cWZgMbYr!FSD<FC4X;>3F1-GooZBIH"L6J"j65#MXI-na%CNkU!-8i?=iT;0bG0MgtX>f!OdhZY'8?8\L@D-o4\pN;-d3e<*`e%>]_PRYpH\iZ=i)Afq_VDVQFO7?X/mfEt4lBIkW8q'c7@rCr%(A9@&Dg`\q+;OWeA1?6=`RW9td;8d"^YR'Kr-Q&'c@:-;[R$0SLG=\3P]IQ;pio&(!ojZgRO[)kebcroFg<k3;>'=9"BBs.LUQ=+%Ha?FPD%,:"X(p^Z\f)Wl;:k]i'(pMCED/M&Tc<:m0K>_3[P#5BbKeQ`c^tD#peh#FacEt)6[kO?mRO=q673JJVT3.Xk:9Wg95\uL%/dpNLb2r:N)f0BalE7D$2W2LFH8PVK](&\EVH4[+Xe<Epf/E?JGM&]u:'KE4?m!P-<-A-[9SoBrBl?9JhgGo[cakJ?aP8_5oW%LU%2nQb^a5;fICT`2@pIW@`DuDaZ_5nfc&2F6qldX+7mp$*sbH$9G^YOd"g=6*C75qA`Wj9dtpegn!NA=)ejNrX22]P50;6JiI`,bZ:%b`<gTD>7piiacQC-&QiQ[l[RBcIeWuj/pjjH;-kE-fWg(UrVtBbStqXB&MbH`o@F^.kWJKZ9<d]g[J+cRO8qYItD@gK=>\]^oK:J%E-R7>?,tM)/*,,lY4@"D3m&OO?U+?Z!UlEL*?6+%s0M_j5B#C#"-1)i?lN\e8f6K*^T7XEo=:34(r;hQ;$\NZ2WSd?G_9?6`e*-F%3X8kKlPJdN!;m]GIhkBppbO2mqh]s0^O10F!6=[BgV4XBMHqPKTu).r+'jnu^`ae<WWjB_#Y]-JlJ^\0^\UCLhi_=LPo"E.kYmA(%?\R$QL;d6i77?gC;YYoQS8P<u?2C!fiR<>R`G<-Ro#e.&#SW>Q[2an)(c_lM1&)rEO:XG)^OSPpeSR6Pr=C^H(f-:F=t2&N&<MHF%b-ci5&VRF\0M7Cb[.Y"RG0\'=>N_?O=dU_OZO3VP&$nF<RG84jiU4"+$8KrQrS0<tANR?X&2"='d-F`Hf'64?hU:qfVlg:eq'`kL%f!I=*L^MPS"+&"d=^@e9T9>CMc`=ZuZ\='/>@T1EGNm_,ID",_hmI5raYY1s28'!bj9b$uOe-H_@M1g]i[Q4<p/<a">R(ijUS[Q+%49P@>/<TlgBY4'G:Ii'X8/-Q51a!%<`NZKJhii>Wp3"gDgeOq?K:d]lq>']s>Ahu;Rp]':<@X.l@10btVFg6@;toeEF,k%$b<S."%T>[A^e(m.\G.&]?"^9#Z:Fd<L2a9:SqLfTqE.5tFDri^:gZCh@\Xhg4VTd\&qW7!c2a:t206AX_(JV&EDsHFb?mh=[*0'n@\B2@)%\Ol1l(X@]3rF5La)(lpN?B8Aug(Wsm@'i@_DgTIKD<dnc0(ccTX'W1X+o#X_i,^uN5;/Y9-f3]VX"%==X8Kf\CIKP9Vja/C'Q0N!%q1.P\!.o0[7HY.#GQOB3%@nV03U[V?$"J<6]R/t^r)nKiq]J'KHimA$(1BBMe(b";W##,)@DN2:oN@7]$&UrUmh;:4pWgY*Q\/#&%\_Pm56pJN./Jj"U"4oWtGsi8\9#1Mu_uYS[*/;'a63pM;2j!\W,m$cunrYOq,jH0g,>X@tTL\g.0.oOD.3?RTPX5V9JAY7en8-^[%HH*$+!ZeaO%)R#[T[id6kcG8,,UO6dFpr%JF`gN.q8g%qK"7'#KP&L9S@TD2C?Z#D+qTfL0Pdk)J?mI%b08&j)Bd<(;5&3k)Bpq)%b`s4RU*H#6n57m><4a7HQ7BKW9]=c27WXY?FZ'_=[-p!S:cd=A?UILsD;=C"61nPDS^F=\>=[b^<dmX@X7el1=&tr/Nb6)Y=9hhq%dX!ElX>2*\1SBjnJo;nn;4D5C^/YKY&+Y.Km2_FA@E<;bX^blmmKBfLNm,YE068(2$jZ=@"-9pq<g&nbX\UcN#cjDMco75GEZ$M1%4Ock8mtXtgLV%o"ARs[bP1r><O.INnEqLkE^#d/fZ[k?L[^5RW8/Dl1Jp@r?I#J7`g[Lcdg\hL09L!m^M]6I]BoeC<c\6uU!s/a6%"0FR]JjC_/GS(7UJYEsM^A[r#`cMI^"3jIiFnR!4D:*>+R;Clre\K`t4/'N(m)m7HeBm!;0m;U9_I\*/!aiIN7sL3C%s\.K'<g?A%W#_AK&B-4U&t[TDLq]J(8@VSC!K9M8MZA3f:lpU7:uL1"]LXH,LXEbj8C3o?Jr_WA6NZ[t5Pm0s:pB'3U*(kZ!)PH=<k4Wf#RS+p%7/LJTJc\_qFMD]]#65OaJKiNS4%._Tc!qUt#EPRDpIbf!TqEhT5biC!_I>F_QZ$9`Oci]X5[nXlVaY`E*87uQh'a8'+mTLQ2#ucm%\;=ZC3$h4S/+6I#1)lfr2P>c<AP1Ejhmc))VDK;"'YSt5-4',aSuH0(#.&BN1_I@g7FLHU%#^AC(gLAdq%R'qN1_Le/!Ya=?Tptl%l^j/cWlb?\@oFpK^ION/hY:gL771S[Pl)D4$ubX'NQ/!gd$/%%C$[9=bsl1^Dn]@gN#HLFLgJO7+H9D"!F%<Z2_b?Q;p#<0LrLu#%n[][2Kd%_+lH0mtfk#dBb9eii,a(s*`?q$u$5oV%E&O@&Nqj]'CeCG%%(!m*/a=.#'>WiCcNM6ROB-?*_O+7U%[,@uUG99k';O3p%Lt_>G^DDpO9cV**d,g:fJ``.tY6-&09T"\hX5EAn$u0JoBauAo&QNTu'qA!%_QZaJ8j+Flb=F-dS;kKlqhP(6T*K!hN>u`)?fmKW%5_Tj`?aObk3V9?_!(3'$h&#U2Uu6N2[ni0JGVYBZb%E$i!droIEdIb8F'lMT=)hdJ"SE79]4E6QV3>sI#)lNE!)kcm"(lKkMaCg1%,VXk_rMQ:d`nh:f*7ZFVnlg7Bg9#9pAtBteA'S`!roCbrNmp'tb0VJDVj"%T^YDi3B-ss^nhfH?'3EWjc`.h1leN(>b"\c]^"V9]%6QAU\c(a!?lL,8PS:COaG!RN?Fhd0E`k>p\?`,RL5Fc&PJ+0r(J,?_R&$H=!55umkqPQ:LT3c_?[qaCcndA5hD#NqJVp?uF=MF_(%X!a9iVtmXZ?_5*4YDJA?O)O,UD`[k+^O>tqo(.j-B%nEUW[?A(cI:7J/ahNUqSIi9rH)(O.USOQHfOc<OIVnRW&<Y&2r8/Q:P\sb%%u$@"j+D=2pOE#ZkN/gY(1j5_ORJabM>:BUb24\u8_7n<\G,p)TDS9.;fCQAr_EC3O>3o,Pm:on5H`jULKqmt=d+k03rK*(51\rF%pGD3.HL[?2HaD=Q=9$q<bBI<>lMb"s?iAX*jN72RF[Jsg=(UWK%tDRSKGf.*?6#/J:VQBoZc2h*F_XpJ[8$SHgG`s'J+W0k5!"&`%Rf)IRB3Y,*^\Sc$X'SioUO,<,jaZs^Qabh]rJP`1iLW5Y*t#h;TDQO(^\R6A7rSA&T@BOpDn^VeGB[sh\G*6-]_^XZJ,@2lho>!M%?h!4d2uiCD96[SRp2\VX;6BWT[C9JtW>5GpALG68qlPA)\b>aKJ%p@'r%BF'2>GqnmaKdZ4h:7]eMeT+HLT@8\#+Und16!XhkZ`[%]lWA/2rB")mI]i2-a1(IT)\3.jUd`%rqO<67ou;^kl#`)rmEm#]RBPHdndaXKhX68OQYkHf+.d[=6&_(WS:=<6hJC%WO1rJ]&,`X%WI4[De(nX+e-gbPg5+)2D]dn'7q=SQ)k.,JrUZS,WeD*eR^S$QWj39UP*Uu>\@CL9?iT%%P+FsJaMU.;q_(Kk@&88&8DMCl>r1@S%+\7C%/CUY(hlGCuI=K\p!@_?8rRIspEFuJr?@7dN\E`M[oss6IKmDoc<SBV/_OLQN/_\WCY<f_lg<&3QZ/,E8o3Z;MC!uI!CGRJo%8LXThs7HmNHN*CB%i'4UEmS_&nQ*AEpQrA7?MWVc2rFPoe$!Y=ErCXB%r@0=am-Whp#buG+(*dXp>2-[Spfpg)gD:-n+69k4XdL>%US_,,p\"R"GZ:.+-W0T]EHT!ejQ+5KNAnV#E;uuj^\[<GcQ4)kHh<f&)`M,Hmd3LdIrY4`qtK!Zs1dIHro3k1L\Dm=F8Xh`NLPDY%IJ)-ZDVm\YioBpVce@c2_/e>]bksi<<C>%"kD/LjJ,O;0^F4RAgW)rEeXX>J_FHPWrULK6Hg.s3oo&L.kPopMpP\e+4*SF8bPQ=T%gj]:kHZ._giT:O24OaU`+T+&hh#=+_r:qkXHLli;[m/R&Hgu]11VE8[eCJP)A,Z<YY2"6)6*pM;[HcRJm>78@pI9IBke>derF3K]%qQ9D_rk#Xhp$oM8:B14Q2rDl03;rW=0AZEcq;8l-j6MbU,;c7qlLQt&r;!2YfAF5jp?9J^+2%45?Z*T@J+:oB;#BotY<MkEf0.`>%.eE]$Fg&6kD1CAk3-<b:b@3HuL&B)CaC7-rL%rf?b$t.iYSVo;qbL?'VeN>-pg)?taL([TN.m>#GL=J!kLp4Q=UA/InoF)MLTH/!%="`6&GfWJ_]?]Nl#nL/FO02`rSa_`+n7(OBT5,f:A0pS^BU<?Z4Cfa;3d-p7_F%A@UFV[J-Tkoc4M#RdG/?UI6?;mgC+"Da8r.%T%MuI;A#nL/Fk>&`B45h>5iSH6T1@0\?*3^'ul<gifn;roSd>2(kSa_`+nEA#+gBeBn$"YZSCaV?@ag)l]'((@-XG!J,]0na>+Y.!Q%;dZ,en42cCJ"iM'OHkorrCaO3rbt$nc`n-IF21ECPP!A^Bd`geHKq,<-Tkoce/>kl45op:N\AFJGfWMPe+_LYm"@T8O8X/^iA1_?%KKj=7I@$Mo#O\jhBdZ#R,s:7ZnFQ""LZW$Sa"G>+G\A/0f?!(,#nJo?D'>6Y-TlL-9Zus;fa4;/ST)\o_F#^2HS*9&g.ln69)-(Y%nrL3m*pUXepcn^F45h>5+_U.>m=[^@Er7`[K[1XB&jDFR5-Q9'D#!lk:#OEa+(4sBfpY0kpqFf@pTl`.Ms'Cl?/RN*U']nlI"s?D%E\r?b_t",F^rt+.l;rG)k3g9*!\Zqdr9tJOKI0N>nrn3IQ_Oj,E<8q_"^[39nE>4@JX<,<6tF8\klQ?d-4k91mrRu_=nRG+e>I!W%mZ[Id(IeSbrVW')XRt,J[i:t>o&Rf'^O5(nC<YP;SpYB=!((WQ".PuH`G<s2#[Mh7H(*0&cZF6\/'lM.,cUAFp;nfnNI2$m.o0ik%""SsC?E`./6FJeG8UZg%HC&>Fkf$OO"Mn=AD9rj%4@5n_7YB=Z9T,9YU@`(HgNGaeBA9Wm\t'@bd%Y@!2@u[eA]2sqE`4Q@rf:-q%H0MlChu<MDBE%nuRs.'-EUVL5m0/`$l*5*Q5/2C+KA6-mqM(U$q<;8B^2`U:\bXfjr:@%4/Uoct=9&$SOjF?#o00hYki:3XGBDr(%+Fh!&c*q&S5l1!$rD,Y)FE[-1pV/b0a84[?s5AH#4*J=Zqip/3!daRfd8cJqG1Vc#*Z\P^nA`_V^:F3qq)=pon`\h2s#tlAd(@%W%Hi)@Ja3PcAfajqGDiV"nDmg1Q[/B/,m"ZZT%mN21Nc3)?^&(#aht"O[^Qi0092E![=QFt%QiG2,q"(9*3[TR\/O+\3s7h@7s)T0@%It.C4IrE@LURa?)j:%P(TB#J7=AEV0nbD'?D'pceM,\u1'dl7[-`)O*!8C*<><"f2)Na\@I]M_CD("2jH@4QEPF-qqP^KH`ZlnQ&%omDoWBsX%f;R%N6i^rcKk#D=ZK1t]UQVM(3)sXsV?h'.YasA)2.B]>?FqQ]7M,Z.WJhA?NZdg!s.7m`^/K!JG<[;QWlfAma:PP2p%I':\77JYe@:V:n*rS4h.hqMZR.S"<rq,*>6d8EJL5,g8M-du*3^t4e(A?KJj3u#/fOC^.N4@pj@QXW-uV%h3cCXUaa?ma&gW,9At%k7Rhs<X+dK+"fJI*Qgt!-/!YS/@j]8<'5.$?P=\3=i_U]b1>l9/;a#(eK!4d9E:g2UA"f!=L!e4aVL[`e8jcAB-1WFF+R`-XnfNZ%0(-dOUJHoAIN)MIa`^<W$ZDM^ocYKN)^2]45QF3E/&*5h,TY37#"V7957%qV5WVt*9MU]KLZl*EOY+6hErZl;I2!\oaX$&OE0?c1%NJQs$aLQ:>F8H)!V`AY#3+k_kq^pA^,\'Wtc`4dVpUTQ=`osYUS#h'M+'OV3!MV,7d.>X.)./\\U7#%f>7l@JA(jY85]$npgeFTj%0+N\$EtQ^Nn'EaNWE5:-lr'fWVmA4OcRSNbj$_6el&0GS;+cjiYaoW%5I&E+"I%)F=DEkmEis9Dq5cNqk@E>XFk*&LkaXH,0$9fo%j+5s.PGTRcQCQ3]E;4"7hJ]u)(%b+5@U_-Z7?CQS'7am61YcLkjYH.1-Y/pQ--l4\XWVK&(1AjY4q:!SRNA%52`XW1RY]^I3"aWr%QS9[:`K#u/&qEApR62YP/\8AAQ@,gb<0p1C4m>Vp0340E&7&I4$)s!2YK12Y'PH#<hj3L66H]^LLeN42>5W?2jpkg#Kns;F4n9,O%.SoF$WXf;"f[.!q$X^H!kp-Pr8(/(23pU[-<GiIDK^=2[,%#aq5R7uU[1mk@!NU'9$rdDt87;U(1*g9+"GtmQR?<+=L$8%pL(.c'%bLVQrT+;P,RafdiD4AT%i0#'F*sq$Q/\)R8N1*Y2PSJ2_"-KE\MOe:U-VfGeG.BhuFTR_#A7E%(8T$t8'qr+]`YLMdVq8W;U0Bmr%Ll4%Pp<4hhP?Y&uWGD%:0p?uFKL@BC/5qu5I>iL-Y0p$)C3i.69hN:)"^:%S%g2+=>%HFA?:H6]!^N\**KZi%-(YWT%;.s\RII#Y%P&Rd>:M_c=4@MpEl8A&,[)A-[\<('c"R11)r1(u,_/)TOA&G07P/G=SaaI?3<>Wpf#mo=BSBQ4UC\I[0oSH3g9.#QMV;qpCYi0BN%89Y%Ca3B]V$Q#ltNgGh5p/5d2cRV"`?g(UTZhpeRBZM+Qc#,@@Me8Ne9;[6<H$2eN^JS7+Nf1pXBC?t\GuZ7gof9Bpa#F"ibu^N#%qXjRJX]ma1L#[UQMf8$Wke_>neQZSA[ZYiYDi($N)(+AY]!EXF=Ura>b)VWqn8Y8/UQgjl:tP#"Ah&SG^LdTV4tbn"Lhqb+&mOWq%3gjPN9%BE$MZa01m'tas+;aL4H7_IVr`/[af`D=e<_(?ildhN^VZUAoX00/&fGk38:+kb3LQg#I2^Utd$jI+Rk;Jo#5q7+8R9nRC%E?\;a#Si9B/Z$HRJ\f-Q/TS?fE9l*YasASIr.5%rIM7j];3Zs?R!dG".DKFlRS9#\Q4XHM-[&i-4"C[2OY)kLV^^r)(*k?0F3]a^%$HF>Y#NC:CXsDe&=HuV%#puKnhT^d_1:,=9:5WIm`0@j-.3WEG7"fpJ#E(.WMTD'Arb>Yp"\9!CVIcI.+S70bKEZ7$5ro2qDCH-r%EN;L-V^R7gg?I*<Qj="dA#pVR'#_h5e:Iu!f-QYmjs;CBguiZ[GVH9\mLTrWjEnS#<>X3q,OC;3qg(Tm9'P6VYpq(.*BBQV0aUAS%5IEjT7`X[qeLO=,>pS6fNN,NC%P'9rdu`Cu)g8Z!EfJZ`GF22u&Ioa];5sIUn?SQEm?mbpB:lf<@qXSn:1`Bj;39_W#0EaqE0pg.%(!D;H2ogB9-K_hb,3_)XaG5l*l[^5P.Sc3B,"mWWQ"foa5!ZPkgbqS9rLP(o_:4J922Uqb,hsZG[u[I7q"Q6Z?bLX\m[mL_!4M8$%\clN_KI&D],7J^Xb<R=Q3KCV!5\%V&$6ppFc7>M0X5F0O[Z*@h0(jn?JPONh8ZiIb^&rr%>3G'DNrXlEUbKldH+Y7@s3OrPPN#;_%FNUdE$>6m:_=Iekn1?(dDt*O.&>B"j=@C[)Qs:1W@HReJH`^rl8eA6EQlKT$.%pW14r(hk"m77Mqn_3T$.lKl-@f@33r9C4[^I-6%2"&I$5a2p7rYXOZHV'(Z-Dt_^^d?+2F*]YtL`fEXnSH0t/-oOCR_f,<j&j-pF"!O0j&(Nf[2s.1W^q%01^hYn&1Isbb`KnGTo'8j%WHP'-6XZ90i'P+"UDH<V>JW/=3Hr?>YZak0PEZaIR.-nt<C7'-U0L/$&PfSV.Ol3-#S@9!n!T,clVVhU;#^P!\Sk;=R,--%mQme3%K$/3Y2_VgdJ:JO0:5p^o@us?sf.B8h'hG<1\_r9J%S.6>5dr1q%2kZ<S_A2O$54eXF@j#=Q4eY=8BgZa^'5b*p9KsGjetWBE_S=S%"ds^_@*ACB9KqfSUSIM'6\hK?B8p58X_S1&?YiA)'064"ClXl<W,qi^_?b3CAMb\Z@hbUb5S&7c.g!scF`&C*(N1[4Q3)CS[IkGK%B*GLM`L+dH4i'fRepA^!8kl)DJqut0+!7m29t>!NWDI@%+=boJ&=_"pV4RdIKPZu2@V*_XYm0Inm7O5cBHT'W1&-T5bgCUa/1(=8%<f`aoqQAh=+AkN0p&X6*=qV(R.1TC_mm0Gl>a/,2=&e)*KN[Au&M+/mdoKshWL>bUoL0ZYId[Oi>PB[A23L@8AIB.R'd6GFlP4F8%DfN7dR*&Iq=t6"jGH@fl=sc)p<`QB0-+BtUr'RuR]WA+UUmoQ%6?2.&>8C3M3A*`RoiT\#bXEP>d$N6%GW]5F1)di<I4C*\X`@.T%[3Qa.0bB?HLtlocO8(;H3.b"p,fu<0!S@\i);9Wo9Or<^@/Z%VX]SQQ'0jS6_e"r4DSFPueT*kilb^/U"KAep8KBJ@rhmV'5S\q-%.m/S"DI3cN0`gins+q2WToL8trgF)2q_AaF4N(bqgGTP&@8L;VD(AFAK/3TAPD9lf0Q^WS83QaAMbJ`Eddi3R>Ea7FLo'Q,*$nQ(%*Rt\p1,*eQeLnpCitjuUe4On/5Ys(cMaf56dAM-bO&+,%DYk,/>A$"DLP"LV`hir:3?Z<u7Skpkb^*Jm*Kc/>35R3mI#dHNKW_(L%D%Oj_#Kh(L!`>*3.>Npuo&W@>4>b0#'mll:RTU@`(a3GT:1CSW_),:YGKSM0?9[BfnS/SR?<[*?%6!Jgd7^Kq!#:ZE>gf9OkYnEK%a^5I^b!9M7l9rgKAp.,(e5?5J+ippT`]okO_@++*oK\\H'h/mb%Upt9$J6\"Yld#MV(TrNH6A09hPj6sRe;@*MRCYI)b>$A[mSk[%15OFS=UulX]@A]D;\%%&*+u)ohYi$3*De#)Kr8*pJFViso`,@*H6,@ILB7LWTEbcoV(0Y9U%c"m'D,h&QC*jCn>->mb=Qa]m^f-n%O<CPlQ"ED$f5T`_MOuJ/=[ZBGE`[R5h-pqg8l_^#/t@OsNOI^A&VED'SYq(NFA&(L8E!a(hBb0CXBrc..1)9AX]ojr'Y[M4jccpm%5?*tl\<ZAn#5e%J2']#!fV;V.ALM#RNUi/JAI;habEN'JZ0Uf<\9j"Sb;=Ll;8_\.-KE.o&CM?!X[MSn1=7O'bpt,2@VK/%kg"'M%q`p>%db;F9<Gd_JVFt,Nl\0@"Hu4RgTgD\Lc0e1M<L#@>_3fk+K1ZeoJ];-N*<VHf3+Za#'(m4[Q:P&=^OhMu4<mrV:_hKY7S"Z,%5g_*1b#HE'"SH:H)S!mdWe"etL3WNLC`->orU,#,2NG[;O'W,:1[(0s2t5I>5<`dEVl!L#ftJlroYq)uT^u?K"H*e5#87a\.=:Gp%8mWqXpUP&?$7ccdKfX8AnOF5emA(GO[J*mr(Rkug@+^cd>h;f<)5cW;2&'dL-[,ZPjf7#Qb)Vd1%XoEC^*sa@9l0NtcPGhT(sAEV%5Gm/!Z%i#pq4OuRT(`(eehtDFk-gkXcp5JDmVD#,mPilBrHjV<>1M1_Hl,D7lg=jAo!aY*$*+'B%Tm[`*-M[[(#HY<aSc(:dh*bI%,pX8BeH/+OaIT9iERDDSlH(-WCg)D(HE\%?$DQ?$H9tmeFtaM;!bbGQlh;_-]liB=9FOC5&7SH46(:75\>XVHLHOWb=lp!V'Wn3A%FeKf]^?fH9qQ6(8Z+Al->$T@ELL?_N]%Q?QCf8$N0!q2&ekK54VSh&0h[:p[NjT<M$A;t:=c;RhATZ:8dY*5ZaRHX#5*a.VK2obQ%NbOu1m6u%YNJMVI5qf[fMaGR+@Drp.k$^j:l6<]^=BpSp6R<T\PtYBC;p:<l"*m>r[#ls.D55r7B7=&qA0B@.!Pr>KNsP$u2oH5h%!J&>H-HAot"9u!Xbicq*Ka@ofh=Z"N$k=+,54eAo>.*,6Z2nbOUoUeeH:,A$-NuOJ3)"U4Qbq79@<Rns:L0ZL.5&'AQKmec[>mQb%AL+.`l(<T&Xe]?0*Vd:("BD'IM!R#Z7dTCH4d?tNJG7m,Z0eP;jdLACP-Ldf`H"t2jT^po"HrKPSD+UPQm&_CCfCG1O32Z5.BGjt%+dbm\$=_6n4!R3aMJX(J^kOAmll$oro0f5WO1d!]E.S2\(oX<!%Qd5$^oQ65:D7JBTYaY:Uq1/-NM?@1MJ_8T0tt4b@gp:q<r.V\%e0rJi;PN'mVu_Oi>]U`>E8<)O39F8DhS=e#hpon"6LGEM+ROLfaoN>1>g")r03&!+kjAG8d*W;dL@>_-oV0p4_JbC72WiGLh38k%%[UK\mg@$__1_P+'s+>4;i(9j;\N;?fqT4"r>O%s646,`cG'd2)0PRJef!92b>.Ug[ND2PiMM+/Z[o3b=-(.H4_4KW9ScN11+M(og%c[aCPaB$Pg!nJLmQlb7irg@D6''.*Tp**-;46BPc8P-FaLFZ7B(8FG[;Gq"7:9nn%KXITt[<6%4.$*/;5WfK;&ER?2pL'M>D%f2u%pm2j]-$H_);sh/(El5M>f"cgu0Qg;<o;YQ1-2TR#0A*oW.f>1JD1KW)+AT=9o9uXuWbZ``ja2GR\pCUP_(DZHWE#se9P:=+Kn!5Y%_ZIg1raRWlL.)]510\#O0*$$-r,-1:cC];ulCIHj8$3A+M1RlIOa3o8Cmjhq]g>D>9MS1MlN3@]]UrAl$cVaMl;d0[l<jXhXbLE!%^d..jHOQmC<_HYQ-7,_@%6criM;],fHe#K(6pbtDMPHdW#0i)07GD]l&o5lY<kILgVCn!tQIOb\VZJ]=6eC-[Cu`l_dY;5XAa0b[%FO\.PJHJ2>n52!M9VeH2"']JUH\J\nCH"fVH?,lN1g8WL`/J`3!s4b4S.U.,-tHk$p03Umc0$LS`r`IV[qbUI*as$XAe@n;AKh`!%YIAf[/"u@qp&"P>!]!>?E1=Eu/_jfcKG/2E'+5`njkIWk#*G0Uf1^D%pBH(meW,Q4.'q@MMEn-Yr9e)Q-q!$h$O9!]h`P+Y]mdCn%mQ@=cM_1tK_Rp7'16:#%(5?g<SRWY!ccPW]=?+=JdD7Pt_$l?Dese5GR$c/R@e-rZXQJUR%^BSR+u.%Smc8/W^/i-HmBD0=\M<uR%_]Q#Hj;8]O35u+>*9.NeZkBrfhDUC6.5Em&*Cc&$gFT>_cF2ec%%\&u&ABid7LUptF4qd!LlIc"!ano6&6_(`+DRZ-NfcSsr8RK7%\AaI:`XpUkePCQZ7:"e3'VO45X:0AC+9ao8Gf:[m?4k(1gR7ShF.e^ujOup?m]>DQm*7(5aC#a,(g4f]0ii:L(omon-$$lB#bp?6%Df,'&HUO8j?s>,hZ\Wm)j[*S^QcU5kigB8P.LouCMB1qt,(><lQ[-Hqns7bA325O,R/-K8HZE$mfJ!WT9Y7IW#GVRCN4jj@ggT7O%!s1GeNDDfu<<SVQI5P%;LlZ\!MJ0S$PHL0LS;2;*$HH9f`:sDUr_CM#-TJe-Nsi-.m>Om:7VH/!\QludKE+FCph/TMW$OQe=_D]+%S[5.EOE6]+WBu1\O0g_/9W:UG&eu!RX0>o-!tQ7mBTXN['8C=0iDi>hK@p??SoI_I7G0@@H;tU)n.A#B7ph]tKWCH?pdADKd7pgp%Z8st\3WfQkI>U4eff?pA%>Y9NApVC<TVF;=$!:8>!msZ9;B%eDUP$ucYB)ZAe)hDJr)UKtclhiTRkmhX=lK]-6.YqiD`0F4?8Zo>%W7+'b-+/+IW46F49g]('9=D)+$YGmE:;iC(>1F6Qa#HN#Q@TU$C9VNA66JN,JR0_]9Io,a:KW2-X6E"jh7=f)<3#J5$"!Y!PMp[a%_"82[`e;\R(iq\C+bgd8#G\_C(h]LQMf`+HAt00L6igmI2:1fH$f3d!2b-OP\u?0Y74lLR)WX.>*or!Z@-#Rk2.!66KgYA0SREjq%$&pu1FA<PDXMS@Ne2NkG$j!Yrg0pPl+,-/Bj6h`MQ5XV,c;FZdCiO:ue.cs.7"*](9Qj6?]ZA#V/)\`DA@!*nb,"66289NeA<OEZ%X.mX`!<YZCKM*NPP1>Hd)TleT>%BWYD\N`P48>94;p\+pRfm`eS7IFT'-W6Fkuk%5b.H4<YthuJQd6CKBsTg/J;=<$"_*.[!Qi=?%:AXJL4a!;-mV'N-">MpFccSNLChgX?gnUD9h@0lj5-V<o;3qkCrW?c+,`Ol)#hh$X4psf=)'K(=08tUFN"0"k^#]Sf4j:uD&[2i)%_qMj0n&dWoE0Aq>Y:MA@2T=/H63Q^C^I`+UH-Oo&D'Ak0DXcGL8;-&#Bm#X,[#$n%&U:B;>*9[QK%rrP9t".Z[3*>jck(C-7iSC@%*W;I)8FI)o$Hh`9UsPA4%LED$MK5U!HL.N%`^onFn*<H!&W?^QQ>f/YU5S/e7AG=Y3`.+IC"&E*M%67lcpGAY=X7GP'1+e%B1HnB%-j-5UddFW(qhsthkhoLk*5OCF=iW(nf,7`n2b5/6<KL4/IkQnE*l3L3UiD*m"+joE,c2J=(oG[WH-G5Da'CA1#fTU`m0LY-^4T$#%N3ik_n%eo.q/L,,ZP3t^AIJ]O!\5"P[K:<<:>M.f7dZ;1au@i9(lVj^HXfE"?B;aQX,IV/*klB$Is*!fENqh9,KbaK`\1*;q(?,,%qTX0s*K_j]8YTGW*b&"C<Qd^R,*#O/aA*s^=Ecb:E@J<3ULMt$TsItS1erdt6qfhS_6;??Z&_Pk&P=5[X'5!^-j^IV6,O-5IUaRF%1M].m(eqm:K*?mH'"-lkqLs(tSMD9sccAQB\W>,I#f'Kc&_`E]q!"0IWY.ut(lm3E-q08(L5mY!*tQi$)lY'L?3i.)YGM(V=XZl&%?cj:s&ujS>6aq"Dl$,MPK2^ce6k,=7e[&'b+CpQ_4i94".>-8MpXo5'MOW7,%+#lc,RZ@o8Usr[8#5eoK1jM$8W>*2:Sbo`6V0Oi%S>re_-jfU@1B'G$KZI1nUb<#H>*'=g1,4N><6r#6WnneL5djme=@>,#,5X3[KZ$pZ^R?^87(M=]@N5[ZR(Eq7m(aSrj%-2ujCSnL%S]dG%c8^t$<WnpH*NXEdF_+W-/$lNK;JH)VF:s@b$n$/h><O)G7Y6i/6\<dt'7PJ`1;cY9:BQbY(Qf<#46P%Bh38k%[UP%:BlSno%Q7aFJDM]7I2FF>Aho\@Z6<!]T@qXS1_r4R1_Mc&@$i/Te;%MM$7C'rF1D8q;l15Q"3Ch65bI-IM@-9C>#`.nO7ZlcOn'tt(k#SG@%S7e6e,jVu]AF]fhT!Vd61^H3]8(U[&fgZf#)G!G0IO9J4*,N(cFLiOZoFKPO1/X!M?4b]t*0[NMW^%:,rHn$!0'5*oFFD`0F<(aa%8qTmj@qQOsRS@>@omn]:I:AbMO4HBu+'k7UIIskpoeD[sfOq<PC<*Ca_CdX2=uWRIA1.-SG"&ABG-FQC?O0iX(95i+pj$muc]>o5%DogfYlN??MI/oJ009FV(!3WkdVN2pbUb@g-FP0m<b'&Y+O\*r3&EF]i5u5MF%=/N0P6(1]4bmT)VQuu[0K3%EMNj\7M-F<Mq*ZPm%+4romP;iBeMSWG,Ws_3hfp#HgTI3Z4X;$*%Pbb3l=8O-)BsOt6U1824ah(0mqf34!5(H5N(J)[D!'2uEJ54<%lu76HjpB0WGW#tF%^-djJ_[Vm.U-[%&2A'Fqo/W"uSBi(FjEtF#S.BFtF0'^=lNp)&\CtF>4\&n*?0T-B$(]eJB$Fr%%"k.p%Mf)PmHF?U,PB?$Ts'6&%:<bT%oi)WIC+emUMO7/`&Ofdq`-`Q_:<`U'R\]^uHG.\rif$/m;?=;>#q[g"fiL3=6j%O4`;KF0O278e-_+g"-IQ0KPr1/#_'K$d%6/9"V/2o8Tb=^%`$"_M5!&3Ns]GD]\kC.bc1?S?.FcqGtVRk636j,B5STp:/Qo5Q6YE&FhC_<5E;[=CfD7ObSH?41IrMG#Uq@NFq%U'J&UbcNdcGmt4!\V;FHi;87td+2fM@J&5o1e-O86!F@BULde)Ke+>`4Sg+_[1o$K#*>!Ogbq@\Lg.7p"fghR2),aV9tqg(HjDBp%_u>cu:gG)D%sSgtkq(T,\;8;sH*ZKF&JB5II*9TYZ64*9U7l4/n5=ni,?AIO!N9nr`i,>PLV\b*[dI6Vc.5,pCR%c:b!62;c5][l%mN^#?Yn3%DK#MPG9qrEYC8#'iS&J:M&:Dc+R-Z5$\mRM]"CeQ_dF\b;S\h`:A)@h5-G'deVqg`#SWBE.Y28+$$^SPca^FbR>F'l6%hC8'G5k4<sHJ[U4lIu6M,K_=PD!0V&Kjgc(bsGj[4;>7-a(VIY%(pI(YGJ7%-*TJmFr14$jc0'k-5<^HgG47d^ab1o>Cq=(fD4`c%FtKOFYF(T*%<GsL*n+u5Ca'/7Z^HYfJC2S2jh$;1U(-E`d;2lL#33k<(&OY;Jf)teaXgoU-0(jBbh99@BBUb7N3R`j,4d='M-\tT%'MaRr@#9`)[@EL%!h?V5q!p,F7c<U%[kMB))WA!Z)sXM9XX<Cn;U$B:>$R14kLR3"k8H+cFN7+!C*IWdJCOeqlCMpKYD=NAn[*B/%M"/@M$/H@BBQUp/9uB#!9(eN*G][dfe#I9f<=MQo>Nln^V_0]:7qq:oah8[ufF:bk1]roQ[XlJ@5t8U)bk</_YKg0.+iRc>`eQi_%@ho\4_D*-k5laMOIa7(RCWnechBp^4Y:C:?="8(?1o,2HdoLfDi@$S-BdSQ[\+O&H:F5ZV5DS[@M\&9!6SMuY+`t?paC*t22gBpm%9sOI!?>O=KRS0]RPg]`tE&r@o#RjpCDX<.17CA$_/AYnsLW8n^:JN/F\#L2uVIWBN.'u]U+@W_Jo%.C`JGHFL3tq5[V'Wt0;K"5p%R':#UV47mg`j4eN(1]*)':TEIJsi,i>;nQbG%"O7hTrIU&GU!3%s1fKX-iq4=SkhMdj*ufQ9(FleC[1qO&2ugmPSNQ8>Rr8`_,nu%M_%]Pp^1RD!&:l`QW,>?P3N1)Uq/mg#R#H3"\Pf$aH0A&Lls62QW!]5W@l8R<.ScY\V[='QF];&.2:O]@W@1)R\6b6knp]U0FMkX%=V]#T3@7F#?'$51:2J(L=9=Hb=tkUQD8&^QLb^Pf<X#3emjY=*0ZpC4A"d&:bGoX5;cla&WbdTt3g[KPWs^]$eK%,)F[8]/h'",M%np>Xd,ZaP"16l45=SIVDXGNXiH')2p170/+aJ-k*%Z,=rpE?dofT92_eg4?>C35tY]hZ8+8Z^$Pk$Bkj<pW_Dk8H4?s+%6U?"*t8%G4OpUJE]bA(t3R<0mPW2gaOfF.M*m<?!]tCl52D_ep39M7N4j5P2sXipQHVCT&@TJE!mG;mLV3oKHDgKnXAF=2)V^HLS$Bt'Gq>=%"uh'R,ft1&f[ZZ&Q5G6*i"]h\%fi</+C1m8'1,/Z.J$q6a:\\c5rcGR_0&*i"EFbaD4VZE80Y#CZL'QGWosuo$>h4@;6Sdk.oYSu%lN^J$JgjL"^F/`9Z"F(#S6Lo.4ro_WEhReaGo_K-_ls4Cn,T-uY1[:O9?l]B*hA^LFVg<fcS%YKPJ[+=PVqSDT?]DiRf-k"qW+1g%9rP!.j2$D1M[hLDZ[hf9`=b'dEsrt;oXJ)7BSV\n=6)nhL19dC17T6r;D0R<lp!i1*\8.krC*dO(q\-r'MKdkME1US/?h0_`k+p;%:Efj=&.#U9ZnPt"qRNE-E=4q3qJn<]0)R#^28t#Wk1NnY!pmq$!bla\S0&D^cJ5qV,G]tmigAu4Ns!H=f5]bZC@LKR3ffb(:dNgV%j\XYfSfTkiB1I06.b,cWn9$#BJnY($`LKBt\rdi/=IKCfZ&6.!%N(>fnd`j2WI'PCdJZ`@.82sVH;N7cC6i+:5_.:bjds[tZ/2Yh%.qXVCONQ'?,!j!-cK.==GTSZ,g;Y#*a)<LB"6'k0J6p<M("Pb'#lm7/&I742S?rik\)MJ:<@),rO[mXkbFFe;3G3qP[HNZL?p&I)%.tTW,D>-1=ls]Z6SSA^r%YTj5UZ8];1-B2s*u&oic/>Pc!Sr=I$l"j4@afUK1pPPlEOTqF#:@rQ@G]oc?-k/Pm!!$$?aY/3RhEi&%U(J@#\.$<`dku.Jo2Zsf?,p3Lr>S8IGFM8jJr[LM>NkE&Zi4Q/4p>aV4m48Z_(mm.B4*\;@#'8W-3OD;JFsL7W3a(Hbjg3:@^pHV%*Xf8a\1X"PQLTK(iXQjdJRXENpPBU51bBCe<7R;Z;XcY6Sg,F`e0MD#IBMI;IU]pT8CX$EQjTFi'$++l0_oj=oV0o^YG&DbH0A[g%?lmC?o_CU45V>SqO;qehb:*uH_PD7e/:3sK3g'/Z,2(0Ub:-!?YZk4i-7EJ.[QLTN48&O`@)"H9p,E2SWJ_N%5u"F>OEh*9[VVC`%JV/J2GIB[nc03&#WP,':jtRY47\6Z5C1JWW2&u3Cepbj!5fO3cHR=)4r%q&LZDG*EOPhrQ^\]'oi[*ca=+URAQ>;3mAbi^K1;)tu%_fkAaW2RVp-i3:C^DO6fnW!`P-d5Tr#p8&2Q?Vt?Ck=C!5qU,ZQeaK1AC0g#CL\/efY+38dsQ&,e9OnS,c5rZJON!U-IQV,W?$fo%Ag6)\/'8RUT]q(F()7]M)Dfg;U.S3lrD<KA9Q$i0XB\f!e@>Xl:@Q>8)XKbT7^]ebV5^&%D@=%UY$;FaM3O<Mq[7jdhX=&[AR]X0%;P<](]?^f7]WjNOVhoM1$5_I2_u&ZE\hcCK2bd#4dU]RC'<s]UH3:2tJH;`rU)F+TQjJHa@B_U6o-Rp$L"B-2UOh?o1!>D#@.32f%XVrCGfm/5Z-KH2@eED^A!^:6@ZWe*db2/k8`[h1b"U1;p2"T<S%>$>#crf=_k9Bi8`j=BhF`b=b()^<HD3[:)]M=A\]2``C,P%-u%9kJ>"$VXlinrAS-@r1,f'bOL_^4>n13Yq[cl?:3;DcK^`:%f=57dT(_QWuY5\9L+L6&"FA5@iU[-CPj?BA08;qsn^_+e(X*2G[VS%M4[toFbe8!"A>^R.1EHZ*<q1oKL)Z)H@qr;WZM)T;?INq4R%QR=^I20@81QE=;1!:eni#m8@&hJ/S7f!MN-#B<LrgL[a7Dt3\t'S%n_b$oq&Xkeg>6]$m56GJE'Je'eJG:T=scg,7`=tH:l;c[[o%f%C-e3o/FS_0Ks7anPQ?T]F-Vu@\QG.Q#Xm;*""VBD#"7?5J;Kmq%Q7HG/iA$dYP\Pi+!i#$uZ/fr03D`cEa=4T)U\@'p*Y?f%1M@-#OIe+U,UI18IfC)'eG`H`b:r#>fbgClPqTJLF\LN`4[?,Z5Q\]f%A'b%81ssbE*7SkOI^I"?7&2AgfK')go,'<CiEH^K1OQXiH;E!L<utMi&>ld$pghJAEgU9_8*]OH.<HWd!ASITpPpo(`e_jNk:OPc%-oQ5SbNS/WC^F8*!ZR2^egh?$':6ftA2ib-SZQ#C//8[2$q\)DS&M5-bDE-:#sIL.[*FnmUfN45i!uUBF/]K-Ll04!BB+2GoPeg8%iM??s?m:.)Si68B3/E5gHep$%9EW4l5fbekil,a;`._Sm>L`j-j!]-6CEBQKRieQd@(r#AdFl,S3NG*l6XhOWFUX'Q[@%:6q<<oJ%Cu4F(`$QS;?nh-rK*APt0Y:]T6p7.H#s1lr=CJeS6/<-DOaNT1$gVdS/b_[(k+"U^A+lSQ0+lk;pY#bI:SCkH/;5Hf_KmjY33noL%V14P%hipRK!@4I@GHfSdj(#ZYZ3X?%lJd$^dR<621pH(J)Hac-RC%\Z_K;X\UIgqH9gm?`A;T>ZWG$#:i9;#_p0F:]_Qt@;qq[Wj%+nM8&4/_U(&WcRg%$O<!)\*IKqRmT\+u`pVN4RaqK_7-EDVe%Ep/76u=UI?%Xm(Y@X.5"DUU\6"SXAkmYA#mkP2j>Jmgs.#PSRhK%ksXL;D)<P+e3Tg*7dsfN*<HV11f@[Kl%g\%bR=MU95,:^.-@2mgsmX$mkkL*(o?0Q9"i'6(Q#0;b4CpiA\`u?;tUQ6T!dW:F4p!B%ma!hgY2e8!RE[*b`N98+q3tPTaC+$7N-T^^T&b_Y!i7:(`7C-5.6sisK;4-4(e2)7OXpmhZ>H1(BdleFPI]+UB.4!?%(M-6/Ig9!%S2/ufTT^3T3NH@sEU</T[*.ba8-iL=qa-_bE?'Q<;g#,6)gKZLnq^Zn<)(6FaG7\re!6/j@>I>8_Zk%Q.`I7kba;Ct4kFGUQj?)i%2%Wc.B#GV;Ar'HF2M?r(pNYYBc(aT>BW9]7C^ai;.44C;p)g]"Bt-Hb6+LCGW)Y:n#3Q:8RUZL27G6qG.[)RUh#sr*&:=3q)g3A;%r[brp(1/$6(0-U*lpK'mY>S8ZA^0aTJSu;LL0R!3d3A5[7Rf)MRaQkID:2Zu+)<T:?r6h(2D4%4R>o_fA]UUXQm*<-bR'D;]NGRn%@.^SCHr38#VSbq_/Kk^<D5T>&MJ0DQCP!juF3#%b[HR?nQbq*A=,,kg[$J1e+J=kYWQlhG@>md?>i=`Ma5(.(jt&T4NgeH#H"^/_%!?Y)_*sY,VEc*,F?\5)P?lod3NHAmb+gamg>_)+O'd<6FdVt+`>'Tl'o@t7s'k*QF\Gnj'R.A$P&5uRal%^/q%:`EJQf<l:ZQ7@B%QDm],:O0n\C&O7.:hSXRH,VPfL(Em170i&A2cQ%M12ba$bo:h8?1JqoG>72c_%cfZ5<HliOKIbK)=,\hI1#po?Fg+qkADJ%_,Kd>%'*aCF>m_kc]'D;X^'E&n*;2Aq*g]lV)MZ(WFBhb)mdt%`#:Xd1!s!aBV<_b@16n+<Rr%)9RDNu$hRUSXK4Tm05K?51A*Nj43T=UC%NHsbnigdWc'd)>Lgt%VYU.U45Fa^d?RL_s4hort>V3"AhO).LJ&brGs;kfX;I0>'-3H?tl'8f<9\m:!qZMAiqDId-f$aran`;5_X%4k4#Q&=q90X8m<:q'\jAjr&te?Q4%n2fC$)>NQV0nQT.n1jY(=(fQ;C+[.K!MX9s5dAp+O[S%@m#*R6MIJMYP0Fb%4QY,Fa3',>d%,1c.Thp^14#$HKBMDq5(ahgFm=W#dHm7=:o8A:,+[)4oDX_W_/@!L!F1BrQ[+!SX8Lq4Jn+<R.M`g5S1XQ8=V`,X@,dmnDbSnF&t%W%6fa6\K0,f`RjI,VqHb<U12j/o81g>*4_2,ajp(GkZ%IoM&U0#sfC0I>8MUpAJ1=NlW2.kBmHRA\4^_&JM-U/^mB^F#"1b4^.Qo%@1W"_=?j2;Ka?uG1Q_YTjK!J*=D&9eh\\]Z`b)&\n0I">V^e*\T'krG8g!#ncka*H"b@hg_T.8U'rA%/9Y#;.RZPNgLl8;_=D1BB%k)\&t:b5O7jtU4l2g%!Dg$@!O'F&*r2unr+*Adeu)Y9aWLP?dS>VIAH/Z0-03b-O_-t3f[o`e,=QLAIXD*/Ds=$r)sWGnE@==L/i%&13R0Z1?*4^e$I8V7hI]BVuII;YRJA-p@=O+:3"@)L<KgKS`Bc0X*b(%os*2*,IF,5g5eHj#*6!;;QkF^3a>5mjNjU:s<qgRg`Y:%nRcq)[aSu=J7<Cb]^%n>G\l>j]M^0,V0if-#3nXHcHZTH&Rtol4L,(BP4<\u1Y$QWND`TRl]p@,5\7)28h?\%qa:XmF?I(t1j=`^%At@nZ6&e6ifT1*H0&3d4l>g!>B52Y^?3XKir>43D"gaFbF?oK$==/*+?.Y`=9;=OCh1`1l'77QTn*Ql.*;[DH\U,T[;Z@2:c%)ba%OI1>,+H[0;R58;7\5co)ibttL''-im^fkh$WYQRsWi\)T*7dtW%t@uT:BT1@!qR;Y;,R,iN2_HD$RplrCm")qbY#!SnYG:,"$j:K%7-I\`MkE458(HDeq-36cL*:^+8P!/!9`V'Gh-*DaT&caTX`fNlRbqr#[Q__Gs/LC1l,mO(oYFpEWe%<F`&[/U76tP7'XSpLfad5q%D6^+--2B,>`1eV&)L(C'*Dn7V)krJDqEFF#Q0jP7[)=*?fNfNm]u]Y2H]+!]?S1'?fRm<DDpj%L9tO3o!ct4&M]B0Q0N:gNJQA6D%F>"J@pif7ZN!q?T?k-omq#HV-YGr6U;mL*Z1tO'rj,(#j`:tZVES<roC+n&787S'D>sX4<?b,d2UK!;Y!!9&]+Sm!/"0!9PPqBeU%Cjd5u><TIri3j\hURE>Z*C2i$\SjNP7SMi+"QO5.Tqp!^D\4BV&[*CR[Ug;cD-\1/o"'TSfA\2H_"_C8L,,o]1BGR^9m6\!GuJp*%^5Vi:qG&6@'[/=0T<V6:N%_dEi<C?Z:9cUSU4OcN<:rRuq3L&b=GUZAq8$k\1Scs&LSU:AQkXljK?[Koq&.T;+j%S\=,bSFJeUAT%CjX(U=Gf:TWsc&@.U^>bU4&]?$Wq/C(oA?CaRe2m:5)hrTQR_c$$u,`6k_/N&n3;#/qWd&*#FPX"$VLJd.OYX_#@'>(.sN>^l@N+%C^*7MHcE:r'l.Q#?En6:D^4/k_F.)9X+s(J::^DuKlgr!WOu@g>=s^o$k@S_l%+`m^1JVVmjV6u1.nsYF5`onNJ-eM(l/eC'i/JA%C2k<A9gOh8">ki&K!Flfe[,=8SB\_>J5Nn.1,<dq0Tnb17UD",)c]'sVS+1EY#J7Tl]n>HAaV]3V6>($@ZO5BZGm2m7(9;4'==(Z%(q]qRM5n*r7[]j_,F[OsUUhCSBp`!A5[YcIMfBVjV&9SR.28f$2NN=IW^<At?q=$'0I^W>Z(I,J1dt,(L/o/(oT4>G<5[BDju:Xb%5ng4eAE.mh"hplt"K#>$X4P:AMWcC"?l&g&_T0q%.F`)j"WO&G[)R7N2U/F"KUtH*l(PM2*Qq!.$@ljM9%,!p7&,8oJniqfCDkoS%<-1!oh`CfHpaI^^3*Tc9Hs2BKB?7oAZh#/@1iKIUBQ=I3\Mu*>eF80XBST]OD+#'K9`![&1Ql:t7Nh@I\41j!#,AAl^iM+K?\'ht%Ua+<ZAA12dF:7#lC?S&([]."WS&rZ'0jYrI?SnBT7s&_8$o:Nk$Njt+q50!4(rT4i%m@.-.kN:+'/FWr)#o40G^+*X#[@Y!Y2"mh%fe!b8++&."iqKCrmDp`kB8h`"(G*iggBdI#BZh2u0i7c!iG;ehj]8?mLdVl!k.dVCUa,%b6X(Y-Q1A5GPq<l8B4E,\M3fi\@E8b3%>VQOV.\c4OfMd/n?U)B7ST;0`OVj9^Z<e`B#NHJThPL\/k[UL=V[so18?<"Z0<OF8EGBH=J3s/Z3]#i4;CbHT!-8HRDs\AQeZt::%##-8WTgJ+'ROABe():>F.jFU+kWYsC*+R)6@j.iD.<B$uerSK(O::_BO@@0XfVY]j7SHNO/*8Fk6c\22h@`Bg@*N9^$V#=bjCG%G%/2?88Sa*,[/W5F(K4P&6q/,6bT]0>ZB<g'jQl@=J"jrhaH4S7ucFd'F`Q$f(&tPLJkbt%!L1+nWSr_ZF!ANqEYAdmlj>fA"Cn-nJ%E/Hn%-:2]N1L.!u6UJ1,Z`B6g!T4QDTS5p]lP5I>UaT?[X:*FO7-9)$XAFKRC!*P[*gNb"*4)=(>bsCl91HdO*G[)5;Zfpdk$NtY%-0@hOHC>0JOrTZ70cNa-6^EG8R2QC$L507qeYkSaE7X5u1Hq-BkWAu64q-%Y!`>]-YA$=fd\@m49-V81<_e,K0SQ>N;ohEP[?;jF%ad*#fN[HqK!MI[[RVJcY7'km+PiKKB]%@!ki[s4&iS/5JH`*sCO*G'nc"fWfisj#!U"E0k"IqV!RnWsRQj@AA$H`-%0P1bs&4[ON%!mF*O'<%o2Ia5FYAnOPNB**t]ZXqe.K$/_D)P:XtCSm?I/?#XRAfU`4qM;PDjt&QL:apA+H=h>?6T1[NRL-Z"rTO"ldn4i\^?UOB%23[\KMD[)_Ft8:e[G]jO+D:h3:T:Be-H')UfL=jaQ;W4H[?Rr._TY*bmkTtW`N9t!Ddn_EVA&1[0+cBE\M2=hm*sZ:I!6>C/3'5t%I[j2h@jG3H=XmV'80HFVA`JL?]j15WO'cs@#I2/_k]^:(fI"i&akS@?ZYD(ZE#kCU8+g2QVmrf(UZifHCd2YKT;A:Do:g.*R,WsI%9j=>0Zj[$i$hg1;2*j*fWaVX\^i!*q7P(oJUX\KfhXfOnn\t$$J2VZ[A6@5,;402,5*EkZ5"\7q+4[+:eg3aQj2siF[g7+4""9JH%blFQ1ad/H5PY#WI>(3LnK4!4]0Z[o@NHLp7KR>iG6&TK7^T2d=fi(]rG0)c0gC?WG*A+,nhBNus*SOp.cGBFGDFV,W1S%>,ijBr-%*1>q5`*n;@&W#;T6m1hi`9C2C>0h*UU<<29(!C@\"JQ31@F@K^CER@!m>0&jKuf<Q8TQGV+aB=S8/gWV<L\9Vq=Q5#^o+,F%O#JJ%NMB5N92MpCNK,*h/3T5k;?-bb]`>E\bbR['XJTR-][G-ZV3$qQlA4iiM#-ITA2''i]hk`Hre_Wg)`7TK.FT,:82tW""l5O]X9;(:%IIR6`MaJY"59_sN;d^3BS'=oF%.>Wh\A"(kqk7auJ7Wf%Z,Tui["UCM;1j0q:!8-e&>5"5eG$i5MN'c@!PqVY;hhu@+OsCRT%L%F%;kttc^K=+W;QZd[s572g5IhtD&tE(R2srLe>+?:YTB#Y/aQW^dEcr#k$0"Z0[e4&b.ss?RBVg!kF=]=gd4.tS:e[A"VMkuhf.hrp%5qS,`<LRTs+FOE<j-K$l2Yr,=c!1t[AkX+1J9p@''/To05p/4%WjI>nHAg7)f%#*[5m3%N=k-)^+@t_FeL_e/VC5G#6J*+*DZ\io%1g.kP&EW=)1JXpg"31`ld1MG,e*I<LEro'.Hro%oYs)=FfbH`Z[L:OU)%un<@b('%)"sC"r*5N-fC&:HHCjeWGHGt"IlK'!]$e\U%%8pPm'W`li$6FjLOujQ&]$^]PG,)MF7Oi;q9Vcd0h%8(gmGDea@MkA6d.o5f>6-jLkI`C6RG"We4CVHo)?l#\(WPZ<bAPYISK8X<%fg4s<bAjs>b?nXMdN!GeN,sY3=kO3g<%^tBn-uDhUBSL*mmsCt:q<U;&jApI^2!^.4DM^,ST82`d6FQV$Y.b3:`t'to!Es-IDJ6_%7PRG7Pmc5\^Wh3l5.K&D"9'A$EVi<1,iS90<CK;MbPRBgk%<j[_RgYr)5<QsPO#41J7QoWK]ff=/g<!&Gp8*2cY]sNaLe=p3.h`N%IP*KXpG,=2UF+=iAUAo%O"On1_G6`+)ZAM.FUYr.R%1>3(8`*ZPKN-"B$<6p[9d];Z(oi+Hl/2GdF;c!o]D([:i5!1j`EdtYd+=r%;,J!b).mcqQkXtGWYid:VRL4W3[-U\RQ5_\atmg(E$95d9JrAeA1+Y,3"_b=1Lce4#CM<%l@Q#-@Lqp>2QA?tjNauaiY?Ih;HUUZ%fBW_C_6:'VZ.iEV$JVWtbg/c>b/S0@ObhUWZePh6Ts7]H($=m^qIYP$1(C<(V=;jFZa;"rVN_6=/LK`l%'bG*_QXUJZq]@5Et,j]%^7^QX?o'u0d_(*=_9R9j<<(K'+OhJ8iL?],=:"@^lR>XD\AROI%7DLZ=<*ud"!Wn)QjEO0bmAW\MZ$q"RKmnhnAVP/f$h"41pnX3%Vsg@'#mc>-)Pi>?P^.M`"F=r#&#,([dq2=;n2TAd4[;\i$;\PJH8Y)7)Q!sRUf5<GC,,M+j.6(('Q^A&e7HNnQo>M<e.qXj5\+bA%HlP"@7@ipDR1CjIS\U22B::'(!bTK''Uk7A@U?BQ%9#2l,[;gFC4QOg=?4V1M!Vj%0*N2K!N9cK1fu[9XWKZY.ooB6AiXe8L6F6G%5-0*[1a2A9j@oKK:Z[\DOk(X3]=8$l]PtbCa@\mJ7\tEZn9@7-T'g`1`ST"mQH\Vgf1^X31Lh"/99H`l[?/j]mV#'<<BK'e@g%8T%e>WF(ZUN9#=_GYc?!o\t,]F?Q`N=+m\54lY@sH^nqU@6,Y?i<L8K"'GFDZKcrb-'/G^;[`7c?&%T$\Gab<ajkP0G<,$5G?o_M\Dk%k678Ij1rHs\Xm]#T,[\,_Wa$CE+5D\mOeM-pu[o=IR(2B,,26!H+7<\Xd*P?m3[%B57C]>ZNI>#4n0sbLk2%soac@9Du/86J'j$#%RYn0m7%rPp,pR/ZSLp3mc+AP<O1L+N=n`RU@5<7km$7SEq%5IZ`SQi!?7q(i7kb8e!-&oAUSWc!#QT5?-uV8"(%,'/dmuu9R`a'T%d"="03H;b.W8J(Mok:?opW(+>3th\$a@"ECR$F<:PoF3Dd?>eX:DH3.`Ma;\&ce3`c^rn[F&Z"\aB:hcGr,=;P/.XDeGlU++PopD%RN!0d*8$QfRIQt,a!Jk/KOUN_bi5;/Xia,^cjIO:qO#-+#!n\!k$A/P\^@4@XI;a@k>J$;gI$f(0@Xhq-j3S/kn%M<^j4`8hCNa6%J=O45cUJn&@-2YuP]PUP`bCfl/8^`e&\<i?.D<!FkL\YqiKZpf5u\XD-^)1^k>\KM06d7'4-S&-J.Gqidfr+1J]eJY^eAgUBtRTS%k7%Z8N\@5&(Z8FCH,a+k^a0"ra.*L+RT!"CLA@EPG]:Ns\U>;FKS5S&ZTgU96e?o"Qbeo-#kH_XR8dhD*M>d*?V/.c1!,CLA\NF8%p$@mo!=m57\]useIPQ-o2'rCug0i@SSf[]>bTHa8*+,I9n-=R<cC*:86Ab.X<dd%0!$uF^k\n3;h!O8p.n%o3!dtqaiU"Z[!VBOE%%cGpBB:hX2fRoZZdBo]-9!fKn@NY3cpd2/0M"F18-(0b#3eJ&DHZ/0o"<ca'+ftgI+ZmL!*u67LM?F;R[hcWF"aLE<9u$H5Y`eib%/nHqQc,"I.8=Th:=4(O?GbD@.=eP#BXkD^[J@M2/4?B9&=91B\r+fBRGpNB>r*ceT1$B92#O0=d!MimaS8HrEEVbpFCh3VE&h?\t%q0aP9Eng[L:E^[2CtiV`Y-G'W;to)R$!((=Dnp(s%bRHnQo,A79(7rKQY>R@A"A_M]XdGsUt<93:">8K]UC,&2\k53kg5os'StI?%LY"?WL`80g18af+>Yua7FTtVHjor-]06fcK"b^K$:M7*>3QqcFeTY:18WISc13(!L:I@YI1,ur/GV('D1U!XjW*2uQb*W@J>7OM2%F$L"+KJF)*'O$=_'P]t,&UB3<56iJ.3?7lhZ"^dipe3*^<`IJ]5e*a#),<HH,2tAu-Fn*Os%><R-sVl*Z$DOY+j3)46F\rh)i0S/%lj+5?pACh9A;UmND]8%>3<NCqX!N8W$Y-(NRl5HYm+0RLS$/\"ml^IAm,#MGIs(_dd?Q5#h#$aC>@64`m(rY(N^!F<hS8J#hg=u$%>h&^*jY+ZHIWb\VDnc#3rpeTis5JNY8<mNZb*>&lh`^gc<$hj"~>%AI9_PrivateDataEnd